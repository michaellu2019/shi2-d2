import matplotlib.pyplot as plt
import numpy as np
import re

def f1():
  k = 0
  last_zmp_x = 0.0
  last_zmp_y = 0.0
  zmp_x = 0.0
  zmp_y = 0.0

  ZMP_MPC_NUM_TIMESTEPS = 300  # Example constant
  ZMP_MPC_TIMESTEP_DURATION_MS = 5.0  # Example constant
  ZMP_STEP_LENGTH_M = 0.02  # Example constant
  ZMP_STEP_WIDTH_M = 0.05  # Example constant
  step_period_ms = 500  # Example constant
  single_support_duration_ms = step_period_ms / 2 - 30
  double_support_duration_ms = step_period_ms / 2 - single_support_duration_ms

  body_state_x = 0.0  # Replace with actual body state x
  body_state_y = 0.0  # Replace with actual body state y

  zmp_mpc_x_data = {"zmp_refs": [0.0] * ZMP_MPC_NUM_TIMESTEPS}
  zmp_mpc_y_data = {"zmp_refs": [0.0] * ZMP_MPC_NUM_TIMESTEPS}

  for i in range(k, k + ZMP_MPC_NUM_TIMESTEPS):
      t_ms = i * ZMP_MPC_TIMESTEP_DURATION_MS
      step_num = int(t_ms / (0.5 * step_period_ms))
      double_support = t_ms % (0.5 * step_period_ms) < double_support_duration_ms

      new_zmp_x = body_state_x + step_num * ZMP_STEP_LENGTH_M
      new_zmp_y = body_state_y + (2 * (step_num % 2) - 1) * ZMP_STEP_WIDTH_M

      if t_ms % (0.5 * step_period_ms) == 0:
          last_zmp_x = zmp_x
          zmp_x = new_zmp_x
          last_zmp_y = zmp_y
          zmp_y = new_zmp_y

      if double_support:
          zmp_mpc_x_data["zmp_refs"][i] = last_zmp_x + ((zmp_x - last_zmp_x) / double_support_duration_ms) * (t_ms % (0.5 * step_period_ms))
          zmp_mpc_y_data["zmp_refs"][i] = last_zmp_y + ((zmp_y - last_zmp_y) / double_support_duration_ms) * (t_ms % (0.5 * step_period_ms))
      else:
          zmp_mpc_x_data["zmp_refs"][i] = zmp_x
          zmp_mpc_y_data["zmp_refs"][i] = zmp_y

  # Extract the ZMP references
  zmp_x_refs = zmp_mpc_x_data["zmp_refs"]
  zmp_y_refs = zmp_mpc_y_data["zmp_refs"]
  time = [i * ZMP_MPC_TIMESTEP_DURATION_MS / 1000.0 for i in range(ZMP_MPC_NUM_TIMESTEPS)]  # Time in seconds

  # Create the plots
  plt.figure(figsize=(12, 8))

  # Subplot 1: ZMP X vs Time
  plt.subplot(2, 1, 1)
  plt.plot(time, zmp_x_refs, label="ZMP X Trajectory", color="blue", linestyle="-")
  plt.xlabel("Time (seconds)")
  plt.ylabel("ZMP X (meters)")
  plt.title("ZMP X vs Time")
  plt.legend()
  plt.grid()

  # Subplot 2: ZMP Y vs Time
  plt.subplot(2, 1, 2)
  plt.plot(time, zmp_y_refs, label="ZMP Y Trajectory", color="green", linestyle="-")
  plt.xlabel("Time (seconds)")
  plt.ylabel("ZMP Y (meters)")
  plt.title("ZMP Y vs Time")
  plt.legend()
  plt.grid()

  plt.figure(figsize=(8, 6))
  plt.plot(zmp_x_refs, zmp_y_refs, label="ZMP Trajectory", marker="o", markersize=2, linestyle="-")

  # Adjust layout and show the plot
  plt.tight_layout()
  plt.show()

def f2():
  # Data

  # QP Optimization Data
  # zmp_ref_data = [
  #   (0, 0, 0), (5, 0, 0), (10, 0, 0), (15, 0, 0), (20, 0, 0), (25, 0, 0), (30, 0, 0), (35, 0, 0), (40, 0, 0), (45, 0, 0), (50, 0, 0), (55, 0, 0), (60, 0, 0), (65, 0, 0), (70, 0, 0), (75, 0, 0), (80, 0, 0), (85, 0, 0), (90, 0, 0), (95, 0, 0), (100, 0, 0), (105, 0, 0), (110, 0, 0), (115, 0, 0), (120, 0, 0), (125, 0, 0), (130, 0, 0), (135, 0, 0), (140, 0, 0), (145, 0, 0), (150, 0, 0), (155, 0, 0), (160, 0, 0), (165, 0, 0), (170, 0, 0), (175, 0, 0), (180, 0, 0), (185, 0, 0), (190, 0, 0), (195, 0, 0), (200, 0, 0), (205, 0.0025, 0.00625), (210, 0.005, 0.0125), (215, 0.0075, 0.01875), (220, 0.01, 0.025), (225, 0.0125, 0.03125), (230, 0.015, 0.0375), (235, 0.0175, 0.04375), (240, 0.02, 0.05), (245, 0.02, 0.05), (250, 0.02, 0.05), (255, 0.02, 0.05), (260, 0.02, 0.05), (265, 0.02, 0.05), (270, 0.02, 0.05), (275, 0.02, 0.05), (280, 0.02, 0.05), (285, 0.02, 0.05), (290, 0.02, 0.05), (295, 0.02, 0.05), (300, 0.02, 0.05), (305, 0.02, 0.05), (310, 0.02, 0.05), (315, 0.02, 0.05), (320, 0.02, 0.05), (325, 0.02, 0.05), (330, 0.02, 0.05), (335, 0.02, 0.05), (340, 0.02, 0.05), (345, 0.02, 0.05), (350, 0.02, 0.05), (355, 0.02, 0.05), (360, 0.02, 0.05), (365, 0.02, 0.05), (370, 0.02, 0.05), (375, 0.02, 0.05), (380, 0.02, 0.05), (385, 0.02, 0.05), (390, 0.02, 0.05), (395, 0.02, 0.05), (400, 0.02, 0.05), (405, 0.0225, 0.0375), (410, 0.025, 0.025), (415, 0.0275, 0.0125), (420, 0.03, 0), (425, 0.0325, -0.0125), (430, 0.035, -0.025), (435, 0.0375, -0.0375), (440, 0.04, -0.05), (445, 0.04, -0.05), (450, 0.04, -0.05), (455, 0.04, -0.05), (460, 0.04, -0.05), (465, 0.04, -0.05), (470, 0.04, -0.05), (475, 0.04, -0.05), (480, 0.04, -0.05), (485, 0.04, -0.05), (490, 0.04, -0.05), (495, 0.04, -0.05), (500, 0.04, -0.05), (505, 0.04, -0.05), (510, 0.04, -0.05), (515, 0.04, -0.05), (520, 0.04, -0.05), (525, 0.04, -0.05), (530, 0.04, -0.05), (535, 0.04, -0.05), (540, 0.04, -0.05), (545, 0.04, -0.05), (550, 0.04, -0.05), (555, 0.04, -0.05), (560, 0.04, -0.05), (565, 0.04, -0.05), (570, 0.04, -0.05), (575, 0.04, -0.05), (580, 0.04, -0.05), (585, 0.04, -0.05), (590, 0.04, -0.05), (595, 0.04, -0.05), (600, 0.04, -0.05), (605, 0.0425, -0.0375), (610, 0.045, -0.025), (615, 0.0475, -0.0125), (620, 0.05, 0), (625, 0.0525, 0.0125), (630, 0.055, 0.025), (635, 0.0575, 0.0375), (640, 0.06, 0.05), (645, 0.06, 0.05), (650, 0.06, 0.05), (655, 0.06, 0.05), (660, 0.06, 0.05), (665, 0.06, 0.05), (670, 0.06, 0.05), (675, 0.06, 0.05), (680, 0.06, 0.05), (685, 0.06, 0.05), (690, 0.06, 0.05), (695, 0.06, 0.05), (700, 0.06, 0.05), (705, 0.06, 0.05), (710, 0.06, 0.05), (715, 0.06, 0.05), (720, 0.06, 0.05), (725, 0.06, 0.05), (730, 0.06, 0.05), (735, 0.06, 0.05), (740, 0.06, 0.05), (745, 0.06, 0.05), (750, 0.06, 0.05), (755, 0.06, 0.05), (760, 0.06, 0.05), (765, 0.06, 0.05), (770, 0.06, 0.05), (775, 0.06, 0.05), (780, 0.06, 0.05), (785, 0.06, 0.05), (790, 0.06, 0.05), (795, 0.06, 0.05), (800, 0.06, 0.05), (805, 0.0625, 0.0375), (810, 0.065, 0.025), (815, 0.0675, 0.0125), (820, 0.07, 0), (825, 0.0725, -0.0125), (830, 0.075, -0.025), (835, 0.0775, -0.0375), (840, 0.08, -0.05), (845, 0.08, -0.05), (850, 0.08, -0.05), (855, 0.08, -0.05), (860, 0.08, -0.05), (865, 0.08, -0.05), (870, 0.08, -0.05), (875, 0.08, -0.05), (880, 0.08, -0.05), (885, 0.08, -0.05), (890, 0.08, -0.05), (895, 0.08, -0.05), (900, 0.08, -0.05), (905, 0.08, -0.05), (910, 0.08, -0.05), (915, 0.08, -0.05), (920, 0.08, -0.05), (925, 0.08, -0.05), (930, 0.08, -0.05), (935, 0.08, -0.05), (940, 0.08, -0.05), (945, 0.08, -0.05), (950, 0.08, -0.05), (955, 0.08, -0.05), (960, 0.08, -0.05), (965, 0.08, -0.05), (970, 0.08, -0.05), (975, 0.08, -0.05), (980, 0.08, -0.05), (985, 0.08, -0.05), (990, 0.08, -0.05), (995, 0.08, -0.05), (1000, 0.08, -0.05), (1005, 0.0825, -0.0375), (1010, 0.085, -0.025), (1015, 0.0875, -0.0125), (1020, 0.09, 0), (1025, 0.0925, 0.0125), (1030, 0.095, 0.025), (1035, 0.0975, 0.0375), (1040, 0.1, 0.05), (1045, 0.1, 0.05), (1050, 0.1, 0.05), (1055, 0.1, 0.05), (1060, 0.1, 0.05), (1065, 0.1, 0.05), (1070, 0.1, 0.05), (1075, 0.1, 0.05), (1080, 0.1, 0.05), (1085, 0.1, 0.05), (1090, 0.1, 0.05), (1095, 0.1, 0.05), (1100, 0.1, 0.05), (1105, 0.1, 0.05), (1110, 0.1, 0.05), (1115, 0.1, 0.05), (1120, 0.1, 0.05), (1125, 0.1, 0.05), (1130, 0.1, 0.05), (1135, 0.1, 0.05), (1140, 0.1, 0.05), (1145, 0.1, 0.05), (1150, 0.1, 0.05), (1155, 0.1, 0.05), (1160, 0.1, 0.05), (1165, 0.1, 0.05), (1170, 0.1, 0.05), (1175, 0.1, 0.05), (1180, 0.1, 0.05), (1185, 0.1, 0.05), (1190, 0.1, 0.05), (1195, 0.1, 0.05), (1200, 0.1, 0.05), (1205, 0.1025, 0.0375), (1210, 0.105, 0.025), (1215, 0.1075, 0.0125), (1220, 0.11, 0), (1225, 0.1125, -0.0125), (1230, 0.115, -0.025), (1235, 0.1175, -0.0375), (1240, 0.12, -0.05), (1245, 0.12, -0.05), (1250, 0.12, -0.05), (1255, 0.12, -0.05), (1260, 0.12, -0.05), (1265, 0.12, -0.05), (1270, 0.12, -0.05), (1275, 0.12, -0.05), (1280, 0.12, -0.05), (1285, 0.12, -0.05), (1290, 0.12, -0.05), (1295, 0.12, -0.05), (1300, 0.12, -0.05), (1305, 0.12, -0.05), (1310, 0.12, -0.05), (1315, 0.12, -0.05), (1320, 0.12, -0.05), (1325, 0.12, -0.05), (1330, 0.12, -0.05), (1335, 0.12, -0.05), (1340, 0.12, -0.05), (1345, 0.12, -0.05), (1350, 0.12, -0.05), (1355, 0.12, -0.05), (1360, 0.12, -0.05), (1365, 0.12, -0.05), (1370, 0.12, -0.05), (1375, 0.12, -0.05), (1380, 0.12, -0.05), (1385, 0.12, -0.05), (1390, 0.12, -0.05), (1395, 0.12, -0.05), (1400, 0.12, -0.05), (1405, 0.1225, -0.0375), (1410, 0.125, -0.025), (1415, 0.1275, -0.0125), (1420, 0.13, 0), (1425, 0.1325, 0.0125), (1430, 0.135, 0.025), (1435, 0.1375, 0.0375), (1440, 0.14, 0.05), (1445, 0.14, 0.05), (1450, 0.14, 0.05), (1455, 0.14, 0.05), (1460, 0.14, 0.05), (1465, 0.14, 0.05), (1470, 0.14, 0.05), (1475, 0.14, 0.05), (1480, 0.14, 0.05), (1485, 0.14, 0.05), (1490, 0.14, 0.05), (1495, 0.14, 0.05), 
  # ]
  # jerk_data = [
  #   (0, 13.7125, 6.95352), (5, 11.1992, 7.2464), (10, 11.3327, 8.22157), (15, 9.16389, 3.86479), (20, 8.20014, 4.00163), (25, 7.19095, 2.00065), (30, 6.83157, 2.55925), (35, 5.79981, 4.70344), (40, 3.79743, -1.04708), (45, 5.63827, 4.57695), (50, 4.10506, 0.811816), (55, 2.83791, 4.63664), (60, 2.33182, 4.54197), (65, 1.10297, 0.623911), (70, 3.32043, -2.63838), (75, 0.552556, -1.31507), (80, 1.74451, -1.94606), (85, 0.551554, -0.621733), (90, 0.3125, 1.47364), (95, 1.08035, -1.00705), (100, 0.377746, -1.82358), (105, -0.565901, -2.57828), (110, -0.396021, -0.427469), (115, 0.44732, -7.19059), (120, 0.826597, -1.51568), (125, -0.140038, -2.93406), (130, -1.21528, -1.56798), (135, -1.18206, 0.848923), (140, -0.419572, -1.35296), (145, -1.3743, -0.181682), (150, -3.05511, -5.374), (155, -3.85209, -4.26304), (160, -1.77414, -1.29643), (165, -1.15546, -4.06069), (170, -4.3516, -7.96346), (175, -4.16078, -5.66697), (180, -3.19235, -3.9327), (185, -3.70454, -4.58415), (190, -2.87519, -8.42335), (195, -3.90333, -5.23461), (200, -3.31016, -6.77006), (205, -4.93134, -10.0314), (210, -5.8329, -7.06121), (215, -4.14893, -7.41883), (220, -4.12303, -6.3001), (225, -5.17829, -6.69761), (230, -5.43999, -5.76545), (235, -2.62724, -5.20441), (240, -3.05841, -3.69315), (245, -2.81789, -3.21808), (250, -2.34934, -4.44054), (255, -2.47827, -2.17111), (260, -2.86439, -1.45811), (265, -2.60035, -6.09518), (270, -1.84992, -2.07381), (275, -0.885901, -1.8934), (280, 0.451914, -0.510477), (285, -0.169868, -3.70517), (290, -1.57847, 1.2001), (295, -0.500995, 1.30476), (300, 0.735736, -1.60114), (305, -0.34635, -0.99939), (310, 1.94105, 1.22267), (315, 0.887634, 0.0836444), (320, 1.6031, 4.19767), (325, 1.69009, 1.79629), (330, 0.874743, 2.53626), (335, -0.383641, 4.5213), (340, 1.52529, 3.96234), (345, 1.35527, 5.547), (350, -0.122355, 1.11152), (355, 0.0361302, 1.66525), (360, 1.16779, 6.53678), (365, -0.169917, 6.81625), (370, -3.78278, 2.25707), (375, -0.100714, 7.35926), (380, 0.030433, 9.93466), (385, -0.00914745, 5.06109), (390, -1.48048, 10.7171), (395, -1.13329, 7.79734), (400, -1.42934, 13.3475), (405, -1.79093, 8.7544), (410, -2.27999, 11.7451), (415, -2.41329, 5.98997), (420, -3.13367, 12.0419), (425, -3.50616, 13.1761), (430, -1.19145, 11.7957), (435, -2.45986, 7.67183), (440, -3.39322, 7.41049), (445, -1.75203, 7.88473), (450, -2.06746, 9.20161), (455, -0.622317, 4.2319), (460, -0.548368, 7.25574), (465, 1.59481, 5.01701), (470, 1.62044, 0.732673), (475, 0.522222, 2.18705), (480, 0.698809, 4.01662), (485, 1.62736, 3.00493), (490, 0.94952, 2.27416), (495, 1.69276, 7.51958), (500, 1.2842, 0.86164), (505, 1.66339, 1.01451), (510, 3.01726, 4.01286), (515, 0.543327, -1.51326), (520, -0.565535, -2.76041), (525, 1.23781, -3.76308), (530, 0.0427317, -1.00373), (535, 1.50821, -3.30307), (540, 1.22718, -4.72855), (545, 0.719985, -1.28318), (550, 1.28068, -3.05909), (555, 1.55765, -5.60374), (560, -0.409702, -5.67208), (565, 0.15625, -3.72404), (570, 1.02826, -6.66861), (575, 1.75944, -2.97182), (580, -0.43939, -7.10228), (585, -1.71975, -8.02444), (590, -0.583246, -9.9393), (595, -0.40369, -9.21176), (600, -1.08652, -6.68874), (605, -3.28331, -7.74307), (610, -3.36939, -9.11333), (615, -3.49167, -13.8604), (620, -2.6909, -13.4133), (625, -1.42073, -9.45949), (630, -1.83014, -8.75433), (635, -1.77179, -7.8742), (640, 0.591586, -6.14992), (645, -0.997345, -9.42343), (650, -0.812522, -6.28165), (655, -0.524433, -7.79556), (660, -0.845825, -8.58406), (665, -0.421501, -7.20978), (670, 1.0677, -3.0345), (675, 0.712982, -6.5126), (680, 0.548371, -4.71679), (685, 0.832734, -6.70103), (690, 0.658145, -6.16548), (695, 0.132502, -1.54762), (700, 1.82589, -3.97868), (705, 0.709724, -0.982066), (710, 1.98183, 2.21997), (715, 2.18001, 1.85459), (720, 2.44979, -2.55901), (725, 1.5486, 3.23735), (730, 0.157194, 4.08073), (735, 2.05561, 2.56883), (740, 2.34238, 3.96312), (745, 0.553963, 0.256467), (750, 1.44477, 4.68103), (755, 1.43692, 4.62812), (760, -1.33267, 2.90264), (765, -0.1478, 7.56465), (770, 1.20881, 3.90962), (775, -0.0898886, 3.51486), (780, -1.59322, 9.92792), (785, 0.147198, 5.83921), (790, 0.484984, 6.50172), (795, -1.47159, 7.94155), (800, -0.734655, 10.7908), (805, -1.87721, 6.86654), (810, -1.63923, 9.2069), (815, -2.16812, 11.2906), (820, -4.33667, 9.81588), (825, -1.93029, 12.2631), (830, -2.03403, 10.5797), (835, -2.40297, 10.1849), (840, -1.67896, 9.64558), (845, -0.536661, 7.73737), (850, -2.29709, 6.44913), (855, -0.252875, 6.41529), (860, -1.52317, 9.33133), (865, 0.140989, 3.18668), (870, 0.397317, 8.45322), (875, 1.09864, 0.917974), (880, 2.31594, 7.98677), (885, 1.10757, 1.60998), (890, -0.15281, -0.510079), (895, 0.935839, -0.105485), (900, 1.3819, 1.97555), (905, 2.3038, -1.8627), (910, 1.46809, 1.64298), (915, 1.09782, 1.81935), (920, 0.611386, -0.513069), (925, 2.5372, -1.93147), (930, 0.490612, -0.837916), (935, 1.01196, 1.3874), (940, 0.212607, -2.9368), (945, 0.940528, -0.566068), (950, 1.54041, -5.10332), (955, 0.271727, -3.25853), (960, 0.796685, -3.12676), (965, 0.181721, -3.93891), (970, 0.983498, -6.55044), (975, -1.19401, -6.79145), (980, 0.163608, -6.01188), (985, -1.11649, -8.5269), (990, -1.52259, -6.22719), (995, -1.23387, -8.13387), (1000, -1.94012, -9.72091), (1005, -2.38551, -4.20631), (1010, -2.26931, -8.42233), (1015, -0.992277, -10.3157), (1020, -2.85116, -13.2413), (1025, -2.33521, -6.76583), (1030, -4.50475, -10.5598), (1035, -1.52779, -8.17028), (1040, -0.0761617, -4.41141), (1045, -1.00678, -11.472), (1050, -1.71368, -3.44023), (1055, 0.0554405, -6.87288), (1060, -0.14794, -5.39554), (1065, -0.112219, -4.17659), (1070, -0.46581, -6.95938), (1075, 2.1109, -2.10688), (1080, 0.0613082, -2.05301), (1085, 1.06737, -2.98156), (1090, 0.723975, -5.12185), (1095, 0.516604, -1.49179), (1100, 0.359908, -1.89994), (1105, 1.79792, -0.765251), (1110, 0.267438, 0.0760451), (1115, -0.0424201, -0.460885), (1120, 1.55438, 1.44724), (1125, 2.07287, 3.24964), (1130, 1.74779, 4.77247), (1135, 1.16617, 0.180685), (1140, 0.566438, 3.84982), (1145, -0.385605, 6.4894), (1150, 2.00043, 4.91359), (1155, 0.402068, 5.27325), (1160, -1.31545, 6.56801), (1165, -1.5203, 7.86029), (1170, 0.894819, 9.17937), (1175, -1.0853, 12.1107), (1180, -0.974742, 10.6668), (1185, -0.398959, 15.4954), (1190, -1.88185, 11.1228), (1195, -2.31308, 10.7538), (1200, -3.56578, 11.3771), (1205, -3.93925, 14.1465), (1210, -2.04789, 13.8501), (1215, -3.87774, 14.0842), (1220, -3.29546, 10.5506), (1225, -4.57446, 13.7815), (1230, -3.90654, 11.6518), (1235, -1.51735, 10.6314), (1240, -2.98801, 11.2126), (1245, -0.0916451, 10.4279), (1250, -1.56651, 6.36478), (1255, -1.1931, 10.8154), (1260, -2.52215, 11.3589), (1265, 0.749931, 11.9298), (1270, -1.36777, 4.58313), (1275, -0.347652, 8.27396), (1280, -0.294065, 8.42771), (1285, -0.305618, 7.60588), (1290, -2.21541, 2.89288), (1295, 0.406011, 4.47248), (1300, -1.15321, 3.67332), (1305, -0.205026, 3.17184), (1310, 0.0377661, 2.64631), (1315, 0.882145, 5.12448), (1320, -0.588002, 6.01602), (1325, 0.785188, 4.78937), (1330, -0.927339, 2.29478), (1335, 1.02323, 2.02837), (1340, -0.796199, -2.19547), (1345, -0.698226, 5.0225), (1350, 0.518724, 1.61678), (1355, 0.540931, 1.72923), (1360, 0.532958, -1.04962), (1365, -0.096617, -2.45646), (1370, 0.378542, -1.96761), (1375, 0.878874, -3.59668), (1380, -2.17974, -1.09619), (1385, -0.198335, -5.35121), (1390, -2.0345, -2.25633), (1395, -3.01704, -0.0303693), (1400, -1.30144, -4.01038), (1405, -2.38483, -3.37183), (1410, -1.83295, -6.85219), (1415, -2.57476, -5.6287), (1420, -2.39743, -7.70993), (1425, -2.90924, -10.1391), (1430, -0.678143, -8.45352), (1435, -1.4424, -5.30212), (1440, -0.282609, -2.2374), (1445, 1.38521, -1.76541), (1450, 0.634703, -5.73403), (1455, 0.615616, -2.29432), (1460, 2.7431, -3.73935), (1465, 3.53527, -7.18666), (1470, 4.23266, -4.71226), (1475, 4.56208, -1.30528), (1480, 4.8445, 0.838657), (1485, 5.43182, -0.661177), (1490, 8.83963, 1.00492), (1495, 7.94884, 0.983729), 
  # ]
  # zmp_data = [
  #   (0, 0, 0), (5, -0.0019217, -0.000974481), (10, -0.00348947, -0.00198914), (15, -0.00507283, -0.00313868), (20, -0.00634772, -0.00367486), (25, -0.00748188, -0.00422692), (30, -0.0084679, -0.00449478), (35, -0.00939595, -0.00483688), (40, -0.010171, -0.00547512), (45, -0.0106562, -0.00530253), (50, -0.0113897, -0.00591328), (55, -0.011898, -0.005991), (60, -0.0122179, -0.00659925), (65, -0.0124556, -0.00718817), (70, -0.0125096, -0.00722137), (75, -0.0128626, -0.00679066), (80, -0.0128158, -0.00653903), (85, -0.0129238, -0.00619276), (90, -0.0128523, -0.0060261), (95, -0.0127348, -0.0061472), (100, -0.0127125, -0.00591456), (105, -0.0125791, -0.00556155), (110, -0.0123009, -0.00509703), (115, -0.0120338, -0.00492854), (120, -0.0118724, -0.00380689), (125, -0.0117516, -0.00347608), (130, -0.0114827, -0.00294224), (135, -0.0110504, -0.00259595), (140, -0.0106102, -0.00258466), (145, -0.0102645, -0.00226099), (150, -0.00977268, -0.00209783), (155, -0.00903318, -0.0012034), (160, -0.00817022, -0.000461707), (165, -0.00758718, -0.000133357), (170, -0.00707979, 0.000584631), (175, -0.00611357, 0.0018513), (180, -0.00516372, 0.00279689), (185, -0.00433973, 0.00349946), (190, -0.00343452, 0.00429287), (195, -0.00263654, 0.0056233), (200, -0.00168584, 0.00650476), (205, -0.00081013, 0.00759867), (210, 0.000300505, 0.00914604), (215, 0.0015446, 0.0102723), (220, 0.00255908, 0.011443), (225, 0.0035758, 0.0124503), (230, 0.00474575, 0.0135058), (235, 0.00595708, 0.0144225), (240, 0.00677825, 0.0152515), (245, 0.00766353, 0.0158591), (250, 0.00851842, 0.01639), (255, 0.00931061, 0.0170817), (260, 0.0101235, 0.0174443), (265, 0.0109929, 0.0176957), (270, 0.0118273, 0.0185854), (275, 0.0125582, 0.0188993), (280, 0.0131554, 0.0191753), (285, 0.0135665, 0.0192448), (290, 0.0140661, 0.0197491), (295, 0.0147644, 0.0195527), (300, 0.015313, 0.0193285), (305, 0.0156893, 0.0194985), (310, 0.0162185, 0.0195711), (315, 0.0164282, 0.0193189), (320, 0.016787, 0.0192131), (325, 0.0170471, 0.0185177), (330, 0.0172966, 0.0181462), (335, 0.0176623, 0.0176586), (340, 0.0182064, 0.0168807), (345, 0.018485, 0.0161697), (350, 0.0187896, 0.0152255), (355, 0.0193036, 0.0148927), (360, 0.0197977, 0.014472), (365, 0.0201355, 0.0133586), (370, 0.0206633, 0.0121969), (375, 0.0216998, 0.0116659), (380, 0.0222224, 0.0104117), (385, 0.0227285, 0.00878958), (390, 0.0232421, 0.00784455), (395, 0.0239639, 0.00610163), (400, 0.0246389, 0.00476401), (405, 0.0253569, 0.00264565), (410, 0.0261271, 0.00116973), (415, 0.0269671, -0.000725473), (420, 0.0278268, -0.00181283), (425, 0.028788, -0.00374625), (430, 0.0298017, -0.00583506), (435, 0.0304909, -0.00772522), (440, 0.0313575, -0.00903075), (445, 0.0323542, -0.010292), (450, 0.0331199, -0.0116112), (455, 0.0339285, -0.0131053), (460, 0.0345331, -0.0138923), (465, 0.0351257, -0.0150918), (470, 0.0354163, -0.0159654), (475, 0.0357018, -0.0162259), (480, 0.0361399, -0.0166773), (485, 0.0365521, -0.0173719), (490, 0.036833, -0.0179112), (495, 0.037208, -0.018334), (500, 0.0374781, -0.0194776), (505, 0.0378048, -0.0196729), (510, 0.0380779, -0.0198743), (515, 0.0381611, -0.0204805), (520, 0.0385911, -0.0202962), (525, 0.0391768, -0.0199213), (530, 0.0395099, -0.0193905), (535, 0.0400108, -0.0192315), (540, 0.0403066, -0.0187353), (545, 0.0406423, -0.018025), (550, 0.0410497, -0.0177836), (555, 0.0413793, -0.0172797), (560, 0.041671, -0.0164059), (565, 0.0422395, -0.0155099), (570, 0.0427298, -0.014875), (575, 0.0430989, -0.0138161), (580, 0.0433667, -0.0132646), (585, 0.0439441, -0.0121241), (590, 0.0447023, -0.010845), (595, 0.0453023, -0.00928924), (600, 0.0458783, -0.00782834), (605, 0.046551, -0.0067151), (610, 0.0475325, -0.005449), (615, 0.0485264, -0.00398675), (620, 0.0495376, -0.00185624), (625, 0.0504362, 0.000212871), (630, 0.051156, 0.00172746), (635, 0.0519324, 0.00314163), (640, 0.0526994, 0.00442975), (645, 0.0531339, 0.00547255), (650, 0.0537898, 0.00696966), (655, 0.0544184, 0.00802084), (660, 0.0550051, 0.00927777), (665, 0.0556353, 0.0106378), (670, 0.0562043, 0.0117968), (675, 0.056563, 0.0123613), (680, 0.0569697, 0.0134035), (685, 0.0573981, 0.0141834), (690, 0.0577851, 0.0152303), (695, 0.0581953, 0.0161902), (700, 0.0586779, 0.0164901), (705, 0.058922, 0.0171178), (710, 0.0593215, 0.0173121), (715, 0.0595418, 0.0170441), (720, 0.0597337, 0.016814), (725, 0.0598874, 0.0171893), (730, 0.0601673, 0.016739), (735, 0.0606423, 0.0161575), (740, 0.0608514, 0.0157755), (745, 0.0610206, 0.0151858), (750, 0.0614412, 0.0151041), (755, 0.0617377, 0.0143906), (760, 0.0620363, 0.0136735), (765, 0.062724, 0.0131877), (770, 0.0632467, 0.0120386), (775, 0.0635802, 0.0113925), (780, 0.0640967, 0.0107931), (785, 0.064825, 0.00928672), (790, 0.0653103, 0.00834638), (795, 0.0657491, 0.00730695), (800, 0.066463, 0.00606031), (805, 0.0670744, 0.00440992), (810, 0.0678466, 0.00330641), (815, 0.0685859, 0.00187268), (820, 0.0693996, 0.000145859), (825, 0.0705171, -0.00137396), (830, 0.0712968, -0.00323519), (835, 0.0720902, -0.0048574), (840, 0.0729342, -0.00641987), (845, 0.0736754, -0.00790107), (850, 0.0742549, -0.00910796), (855, 0.0750794, -0.0101265), (860, 0.0756155, -0.0111315), (865, 0.0763277, -0.0125358), (870, 0.0768045, -0.0130683), (875, 0.0772432, -0.0143279), (880, 0.0775816, -0.0145193), (885, 0.0777473, -0.0156892), (890, 0.0780808, -0.0159523), (895, 0.0785893, -0.0159048), (900, 0.0789437, -0.0159006), (905, 0.0792342, -0.0161748), (910, 0.0793942, -0.0158976), (915, 0.0796704, -0.0160982), (920, 0.0799977, -0.0163101), (925, 0.0803924, -0.0161813), (930, 0.0805167, -0.01584), (935, 0.0809276, -0.0156385), (940, 0.0812652, -0.0157355), (945, 0.0817147, -0.0152129), (950, 0.0820622, -0.0150094), (955, 0.0823257, -0.014157), (960, 0.0827673, -0.0135506), (965, 0.0831355, -0.0129507), (970, 0.0835904, -0.0122252), (975, 0.0839333, -0.0111226), (980, 0.0845819, -0.00997593), (985, 0.0850407, -0.00892897), (990, 0.0856792, -0.00752079), (995, 0.086375, -0.00642721), (1000, 0.0870303, -0.00505952), (1005, 0.0877846, -0.00346353), (1010, 0.088601, -0.00263569), (1015, 0.0894005, -0.00121286), (1020, 0.0900201, 0.000478409), (1025, 0.0908992, 0.00258148), (1030, 0.0917046, 0.00377722), (1035, 0.0928124, 0.00550397), (1040, 0.0935008, 0.00689383), (1045, 0.0939833, 0.00775387), (1050, 0.0945938, 0.00959981), (1055, 0.0953009, 0.0103151), (1060, 0.0957572, 0.0115061), (1065, 0.0962392, 0.0124837), (1070, 0.0967135, 0.0132835), (1075, 0.0972345, 0.0144657), (1080, 0.0973916, 0.0149596), (1085, 0.0978333, 0.0154372), (1090, 0.0981314, 0.0160361), (1095, 0.0984752, 0.0169257), (1100, 0.0988458, 0.0172966), (1105, 0.0992359, 0.0177147), (1110, 0.0994223, 0.0179633), (1115, 0.0998212, 0.0180837), (1120, 0.100261, 0.0182689), (1125, 0.100476, 0.0181762), (1130, 0.100616, 0.0178206), (1135, 0.1008, 0.0172417), (1140, 0.101064, 0.017297), (1145, 0.101411, 0.0168288), (1150, 0.101891, 0.015982), (1155, 0.102035, 0.015348), (1160, 0.102402, 0.0146562), (1165, 0.103009, 0.0137763), (1170, 0.103643, 0.0127094), (1175, 0.103938, 0.0114527), (1180, 0.104509, 0.00978148), (1185, 0.105064, 0.00831037), (1190, 0.105536, 0.00616165), (1195, 0.106215, 0.00462676), (1200, 0.106953, 0.003146), (1205, 0.107864, 0.00158165), (1210, 0.108825, -0.000365623), (1215, 0.109519, -0.0022644), (1220, 0.110465, -0.0041873), (1225, 0.111327, -0.00560455), (1230, 0.112363, -0.00746282), (1235, 0.113302, -0.00900914), (1240, 0.1139, -0.0103975), (1245, 0.1147, -0.0118511), (1250, 0.115088, -0.013177), (1255, 0.115676, -0.0139145), (1260, 0.116207, -0.0152559), (1265, 0.116918, -0.0166524), (1270, 0.117164, -0.0181064), (1275, 0.117701, -0.0185067), (1280, 0.118088, -0.0193997), (1285, 0.118461, -0.0202886), (1290, 0.11883, -0.0210356), (1295, 0.119459, -0.0210944), (1300, 0.119715, -0.0213467), (1305, 0.120182, -0.0214583), (1310, 0.120509, -0.0214707), (1315, 0.120796, -0.0213799), (1320, 0.120957, -0.0216067), (1325, 0.121318, -0.0219281), (1330, 0.121479, -0.0220464), (1335, 0.121873, -0.0217834), (1340, 0.121988, -0.021451), (1345, 0.12235, -0.0204943), (1350, 0.122692, -0.0205172), (1355, 0.122856, -0.0200302), (1360, 0.12301, -0.0195261), (1365, 0.123159, -0.0185995), (1370, 0.123389, -0.0174428), (1375, 0.123546, -0.016322), (1380, 0.123626, -0.0149405), (1385, 0.124128, -0.0138775), (1390, 0.124346, -0.0121864), (1395, 0.124813, -0.010898), (1400, 0.125412, -0.0098906), (1405, 0.125762, -0.00829464), (1410, 0.126257, -0.00675783), (1415, 0.126666, -0.00470336), (1420, 0.127171, -0.00279131), (1425, 0.127643, -0.000559232), (1430, 0.128177, 0.00204066), (1435, 0.12839, 0.00443045), (1440, 0.128701, 0.00640366), (1445, 0.128839, 0.00797178), (1450, 0.128734, 0.00949787), (1455, 0.128725, 0.011604), (1460, 0.12871, 0.0132513), (1465, 0.128387, 0.015124), (1470, 0.127944, 0.0175023), (1475, 0.127396, 0.0195553), (1480, 0.126793, 0.0211517), (1485, 0.126143, 0.0224686), (1490, 0.125404, 0.0240164), (1495, 0.124182, 0.0253516), 
  # ]
  # com_data = [
  #   (0, 0, 0), (5, 2.85677e-07, 1.44865e-07), (10, 2.23306e-06, 1.16502e-06), (15, 7.29718e-06, 3.98048e-06), (20, 1.68467e-05, 9.50786e-06), (25, 3.20521e-05, 1.83239e-05), (30, 5.39376e-05, 3.08842e-05), (35, 8.34155e-05, 4.74922e-05), (40, 0.000121326, 6.85009e-05), (45, 0.000168373, 9.43336e-05), (50, 0.000225113, 0.000125097), (55, 0.000292178, 0.000161166), (60, 0.000370089, 0.000202802), (65, 0.000459215, 0.000250502), (70, 0.000559834, 0.000304755), (75, 0.000672154, 0.000365651), (80, 0.000796487, 0.000432957), (85, 0.000932985, 0.000506468), (90, 0.00108181, 0.000585981), (95, 0.00124307, 0.000671434), (100, 0.0014168, 0.000762917), (105, 0.00160312, 0.000860338), (110, 0.00180207, 0.00096347), (115, 0.0020136, 0.00107205), (120, 0.00223767, 0.00118584), (125, 0.00247434, 0.00130421), (130, 0.00272367, 0.0014268), (135, 0.00298565, 0.00155333), (140, 0.00326015, 0.0016836), (145, 0.00354703, 0.00181763), (150, 0.00384621, 0.00195533), (155, 0.00415751, 0.00209653), (160, 0.00448055, 0.00224069), (165, 0.00481491, 0.00238733), (170, 0.00516035, 0.00253616), (175, 0.00551663, 0.00268665), (180, 0.0058833, 0.00283793), (185, 0.00625983, 0.00298929), (190, 0.00664581, 0.00314017), (195, 0.00704079, 0.00328995), (200, 0.00744439, 0.00343771), (205, 0.00785614, 0.00358271), (210, 0.00827558, 0.00372406), (215, 0.00870212, 0.00386063), (220, 0.00913507, 0.00399148), (225, 0.00957389, 0.0041157), (230, 0.010018, 0.00423249), (235, 0.0104669, 0.00434102), (240, 0.0109198, 0.00444057), (245, 0.0113764, 0.00453052), (250, 0.0118363, 0.00461037), (255, 0.0122992, 0.00467969), (260, 0.0127648, 0.004738), (265, 0.0132327, 0.00478499), (270, 0.0137026, 0.00482037), (275, 0.0141742, 0.00484356), (280, 0.0146473, 0.00485421), (285, 0.0151217, 0.00485213), (290, 0.0155975, 0.00483714), (295, 0.0160746, 0.00480895), (300, 0.0165529, 0.00476762), (305, 0.0170323, 0.00471324), (310, 0.017513, 0.00464569), (315, 0.0179948, 0.00456488), (320, 0.018478, 0.00447088), (325, 0.0189627, 0.00436382), (330, 0.0194492, 0.00424409), (335, 0.0199375, 0.00411197), (340, 0.0204278, 0.00396782), (345, 0.0209202, 0.00381214), (350, 0.0214147, 0.00364547), (355, 0.0219116, 0.00346838), (360, 0.0224107, 0.00328111), (365, 0.0229122, 0.00308397), (370, 0.0234162, 0.00287767), (375, 0.0239226, 0.00266296), (380, 0.024431, 0.00244033), (385, 0.0249414, 0.00221064), (390, 0.0254537, 0.00197498), (395, 0.025968, 0.00173421), (400, 0.0264841, 0.00148949), (405, 0.0270018, 0.00124195), (410, 0.027521, 0.000993073), (415, 0.0280414, 0.000744098), (420, 0.0285628, 0.000496314), (425, 0.0290848, 0.000250715), (430, 0.0296071, 8.70424e-06), (435, 0.0301292, -0.000228124), (440, 0.030651, -0.000458351), (445, 0.0311722, -0.00068094), (450, 0.0316923, -0.000894947), (455, 0.0322112, -0.00109937), (460, 0.0327285, -0.00129319), (465, 0.0332443, -0.00147571), (470, 0.0337584, -0.00164613), (475, 0.034271, -0.00180387), (480, 0.0347823, -0.00194872), (485, 0.0352925, -0.0020804), (490, 0.0358015, -0.00219846), (495, 0.0363096, -0.00230253), (500, 0.0368169, -0.00239218), (505, 0.0373236, -0.00246674), (510, 0.0378299, -0.00252595), (515, 0.038336, -0.00256963), (520, 0.0388422, -0.00259745), (525, 0.0393485, -0.00260951), (530, 0.0398551, -0.00260615), (535, 0.040362, -0.00258777), (540, 0.0408692, -0.00255459), (545, 0.0413769, -0.00250701), (550, 0.0418853, -0.00244552), (555, 0.0423944, -0.00237038), (560, 0.0429044, -0.00228201), (565, 0.0434155, -0.00218104), (570, 0.0439276, -0.00206814), (575, 0.0444408, -0.00194388), (580, 0.0449553, -0.00180896), (585, 0.0454711, -0.0016639), (590, 0.0459882, -0.00150954), (595, 0.0465065, -0.00134689), (600, 0.0470259, -0.00117715), (605, 0.0475463, -0.00100142), (610, 0.0480676, -0.000820612), (615, 0.0485893, -0.000635708), (620, 0.0491111, -0.000447915), (625, 0.0496325, -0.000258857), (630, 0.0501532, -7.01367e-05), (635, 0.050673, 0.000116995), (640, 0.0511917, 0.000301448), (645, 0.0517091, 0.000482254), (650, 0.0522252, 0.000658542), (655, 0.0527399, 0.000829268), (660, 0.0532531, 0.000993548), (665, 0.0537648, 0.00115042), (670, 0.0542747, 0.00129887), (675, 0.054783, 0.00143803), (680, 0.0552897, 0.00156739), (685, 0.0557949, 0.00168622), (690, 0.0562987, 0.00179387), (695, 0.0568012, 0.00188955), (700, 0.0573023, 0.00197257), (705, 0.0578023, 0.00204259), (710, 0.0583013, 0.00209923), (715, 0.0587994, 0.00214237), (720, 0.0592968, 0.00217222), (725, 0.0597939, 0.00218891), (730, 0.0602908, 0.00219235), (735, 0.0607879, 0.00218283), (740, 0.0612851, 0.00216082), (745, 0.0617827, 0.00212669), (750, 0.0622809, 0.00208084), (755, 0.0627799, 0.00202347), (760, 0.0632798, 0.00195506), (765, 0.0637808, 0.00187618), (770, 0.0642828, 0.0017873), (775, 0.0647857, 0.0016892), (780, 0.0652896, 0.00158244), (785, 0.0657946, 0.0014676), (790, 0.0663005, 0.0013457), (795, 0.0668073, 0.00121757), (800, 0.0673149, 0.00108404), (805, 0.0678234, 0.000946134), (810, 0.0683325, 0.000805056), (815, 0.068842, 0.000661795), (820, 0.0693518, 0.000517498), (825, 0.0698614, 0.000373502), (830, 0.0703706, 0.000231115), (835, 0.0708789, 9.17848e-05), (840, 0.0713861, -4.31402e-05), (845, 0.0718919, -0.00017239), (850, 0.0723962, -0.000294786), (855, 0.0728988, -0.00040935), (860, 0.0733995, -0.000515248), (865, 0.0738982, -0.000611618), (870, 0.0743947, -0.000697482), (875, 0.0748891, -0.000772203), (880, 0.0753814, -0.000834992), (885, 0.0758718, -0.00088543), (890, 0.0763605, -0.000922799), (895, 0.0768476, -0.000946808), (900, 0.0773332, -0.000957469), (905, 0.0778174, -0.00095476), (910, 0.0783003, -0.000938557), (915, 0.0787823, -0.000908941), (920, 0.0792634, -0.000865775), (925, 0.0797439, -0.000808884), (930, 0.0802238, -0.000738313), (935, 0.0807034, -0.000654251), (940, 0.0811829, -0.00055678), (945, 0.0816622, -0.000445863), (950, 0.0821415, -0.000321726), (955, 0.0826209, -0.000184585), (960, 0.0831005, -3.49454e-05), (965, 0.0835805, 0.000126751), (970, 0.0840608, 0.000300093), (975, 0.0845416, 0.000484551), (980, 0.0850228, 0.000679355), (985, 0.0855045, 0.000883679), (990, 0.0859866, 0.0010967), (995, 0.0864689, 0.00131746), (1000, 0.0869513, 0.00154508), (1005, 0.0874337, 0.00177856), (1010, 0.0879157, 0.00201683), (1015, 0.0883971, 0.00225916), (1020, 0.0888776, 0.00250454), (1025, 0.0893571, 0.00275168), (1030, 0.0898352, 0.0029991), (1035, 0.0903116, 0.00324575), (1040, 0.0907859, 0.00349043), (1045, 0.0912577, 0.00373215), (1050, 0.0917271, 0.00397015), (1055, 0.0921939, 0.00420329), (1060, 0.092658, 0.0044309), (1065, 0.0931194, 0.00465224), (1070, 0.0935779, 0.00486662), (1075, 0.0940336, 0.00507343), (1080, 0.0944866, 0.00527197), (1085, 0.0949369, 0.00546188), (1090, 0.0953846, 0.00564286), (1095, 0.0958299, 0.00581453), (1100, 0.0962728, 0.00597637), (1105, 0.0967134, 0.00612811), (1110, 0.0971518, 0.00626953), (1115, 0.0975882, 0.00640055), (1120, 0.0980225, 0.00652113), (1125, 0.0984549, 0.00663127), (1130, 0.0988855, 0.00673116), (1135, 0.0993145, 0.00682119), (1140, 0.0997422, 0.00690183), (1145, 0.100169, 0.00697328), (1150, 0.100594, 0.00703599), (1155, 0.101018, 0.00709069), (1160, 0.101442, 0.00713804), (1165, 0.101864, 0.00717871), (1170, 0.102286, 0.00721352), (1175, 0.102706, 0.00724345), (1180, 0.103125, 0.0072697), (1185, 0.103543, 0.00729367), (1190, 0.103959, 0.00731684), (1195, 0.104375, 0.00734094), (1200, 0.104788, 0.00736746), (1205, 0.1052, 0.00739776), (1210, 0.105609, 0.0074333), (1215, 0.106015, 0.00747579), (1220, 0.106418, 0.00752697), (1225, 0.106818, 0.00758853), (1230, 0.107213, 0.00766192), (1235, 0.107604, 0.00774875), (1240, 0.10799, 0.00785051), (1245, 0.10837, 0.00796855), (1250, 0.108745, 0.00810425), (1255, 0.109115, 0.00825885), (1260, 0.109478, 0.00843331), (1265, 0.109836, 0.00862891), (1270, 0.110187, 0.00884707), (1275, 0.110532, 0.00908912), (1280, 0.11087, 0.00935585), (1285, 0.111202, 0.00964823), (1290, 0.111528, 0.00996729), (1295, 0.111847, 0.0103139), (1300, 0.112159, 0.0106886), (1305, 0.112465, 0.0110918), (1310, 0.112764, 0.011524), (1315, 0.113055, 0.0119856), (1320, 0.11334, 0.0124771), (1325, 0.113618, 0.0129989), (1330, 0.11389, 0.0135519), (1335, 0.114154, 0.0141366), (1340, 0.114412, 0.0147533), (1345, 0.114663, 0.0154022), (1350, 0.114907, 0.0160833), (1355, 0.115144, 0.0167969), (1360, 0.115374, 0.0175434), (1365, 0.115597, 0.0183229), (1370, 0.115814, 0.0191353), (1375, 0.116024, 0.0199803), (1380, 0.116227, 0.0208577), (1385, 0.116423, 0.021767), (1390, 0.116613, 0.0227081), (1395, 0.116796, 0.0236803), (1400, 0.116971, 0.0246834), (1405, 0.117139, 0.0257172), (1410, 0.1173, 0.0267814), (1415, 0.117452, 0.0278755), (1420, 0.117596, 0.0289986), (1425, 0.117732, 0.03015), (1430, 0.117858, 0.0313288), (1435, 0.117976, 0.0325337), (1440, 0.118084, 0.0337638), (1445, 0.118183, 0.0350183), (1450, 0.118273, 0.0362969), (1455, 0.118353, 0.0375994), (1460, 0.118423, 0.0389251), (1465, 0.118485, 0.0402737), (1470, 0.118538, 0.0416446), (1475, 0.118582, 0.0430371), (1480, 0.118619, 0.0444507), (1485, 0.118648, 0.045885), (1490, 0.118671, 0.0473402), (1495, 0.118688, 0.0488163)
  # ]

  # Analytic Solution Data
  zmp_ref_data = [
  (0, 0, 0), (5, 0, 0), (10, 0, 0), (15, 0, 0), (20, 0, 0), (25, 0, 0), (30, 0, 0), (35, 0, 0), (40, 0, 0), (45, 0, 0), (50, 0, 0), (55, 0, 0), (60, 0, 0), (65, 0, 0), (70, 0, 0), (75, 0, 0), (80, 0, 0), (85, 0, 0), (90, 0, 0), (95, 0, 0), (100, 0, 0), (105, 0, 0), (110, 0, 0), (115, 0, 0), (120, 0, 0), (125, 0, 0), (130, 0, 0), (135, 0, 0), (140, 0, 0), (145, 0, 0), (150, 0, 0), (155, 0, 0), (160, 0, 0), (165, 0, 0), (170, 0, 0), (175, 0, 0), (180, 0, 0), (185, 0, 0), (190, 0, 0), (195, 0, 0), (200, 0, 0), (205, 0.0025, 0.00625), (210, 0.005, 0.0125), (215, 0.0075, 0.01875), (220, 0.01, 0.025), (225, 0.0125, 0.03125), (230, 0.015, 0.0375), (235, 0.0175, 0.04375), (240, 0.02, 0.05), (245, 0.02, 0.05), (250, 0.02, 0.05), (255, 0.02, 0.05), (260, 0.02, 0.05), (265, 0.02, 0.05), (270, 0.02, 0.05), (275, 0.02, 0.05), (280, 0.02, 0.05), (285, 0.02, 0.05), (290, 0.02, 0.05), (295, 0.02, 0.05), (300, 0.02, 0.05), (305, 0.02, 0.05), (310, 0.02, 0.05), (315, 0.02, 0.05), (320, 0.02, 0.05), (325, 0.02, 0.05), (330, 0.02, 0.05), (335, 0.02, 0.05), (340, 0.02, 0.05), (345, 0.02, 0.05), (350, 0.02, 0.05), (355, 0.02, 0.05), (360, 0.02, 0.05), (365, 0.02, 0.05), (370, 0.02, 0.05), (375, 0.02, 0.05), (380, 0.02, 0.05), (385, 0.02, 0.05), (390, 0.02, 0.05), (395, 0.02, 0.05), (400, 0.02, 0.05), (405, 0.0225, 0.0375), (410, 0.025, 0.025), (415, 0.0275, 0.0125), (420, 0.03, 0), (425, 0.0325, -0.0125), (430, 0.035, -0.025), (435, 0.0375, -0.0375), (440, 0.04, -0.05), (445, 0.04, -0.05), (450, 0.04, -0.05), (455, 0.04, -0.05), (460, 0.04, -0.05), (465, 0.04, -0.05), (470, 0.04, -0.05), (475, 0.04, -0.05), (480, 0.04, -0.05), (485, 0.04, -0.05), (490, 0.04, -0.05), (495, 0.04, -0.05), (500, 0.04, -0.05), (505, 0.04, -0.05), (510, 0.04, -0.05), (515, 0.04, -0.05), (520, 0.04, -0.05), (525, 0.04, -0.05), (530, 0.04, -0.05), (535, 0.04, -0.05), (540, 0.04, -0.05), (545, 0.04, -0.05), (550, 0.04, -0.05), (555, 0.04, -0.05), (560, 0.04, -0.05), (565, 0.04, -0.05), (570, 0.04, -0.05), (575, 0.04, -0.05), (580, 0.04, -0.05), (585, 0.04, -0.05), (590, 0.04, -0.05), (595, 0.04, -0.05), (600, 0.04, -0.05), (605, 0.0425, -0.0375), (610, 0.045, -0.025), (615, 0.0475, -0.0125), (620, 0.05, 0), (625, 0.0525, 0.0125), (630, 0.055, 0.025), (635, 0.0575, 0.0375), (640, 0.06, 0.05), (645, 0.06, 0.05), (650, 0.06, 0.05), (655, 0.06, 0.05), (660, 0.06, 0.05), (665, 0.06, 0.05), (670, 0.06, 0.05), (675, 0.06, 0.05), (680, 0.06, 0.05), (685, 0.06, 0.05), (690, 0.06, 0.05), (695, 0.06, 0.05), (700, 0.06, 0.05), (705, 0.06, 0.05), (710, 0.06, 0.05), (715, 0.06, 0.05), (720, 0.06, 0.05), (725, 0.06, 0.05), (730, 0.06, 0.05), (735, 0.06, 0.05), (740, 0.06, 0.05), (745, 0.06, 0.05), (750, 0.06, 0.05), (755, 0.06, 0.05), (760, 0.06, 0.05), (765, 0.06, 0.05), (770, 0.06, 0.05), (775, 0.06, 0.05), (780, 0.06, 0.05), (785, 0.06, 0.05), (790, 0.06, 0.05), (795, 0.06, 0.05), (800, 0.06, 0.05), (805, 0.0625, 0.0375), (810, 0.065, 0.025), (815, 0.0675, 0.0125), (820, 0.07, 0), (825, 0.0725, -0.0125), (830, 0.075, -0.025), (835, 0.0775, -0.0375), (840, 0.08, -0.05), (845, 0.08, -0.05), (850, 0.08, -0.05), (855, 0.08, -0.05), (860, 0.08, -0.05), (865, 0.08, -0.05), (870, 0.08, -0.05), (875, 0.08, -0.05), (880, 0.08, -0.05), (885, 0.08, -0.05), (890, 0.08, -0.05), (895, 0.08, -0.05), (900, 0.08, -0.05), (905, 0.08, -0.05), (910, 0.08, -0.05), (915, 0.08, -0.05), (920, 0.08, -0.05), (925, 0.08, -0.05), (930, 0.08, -0.05), (935, 0.08, -0.05), (940, 0.08, -0.05), (945, 0.08, -0.05), (950, 0.08, -0.05), (955, 0.08, -0.05), (960, 0.08, -0.05), (965, 0.08, -0.05), (970, 0.08, -0.05), (975, 0.08, -0.05), (980, 0.08, -0.05), (985, 0.08, -0.05), (990, 0.08, -0.05), (995, 0.08, -0.05), (1000, 0.08, -0.05), (1005, 0.0825, -0.0375), (1010, 0.085, -0.025), (1015, 0.0875, -0.0125), (1020, 0.09, 0), (1025, 0.0925, 0.0125), (1030, 0.095, 0.025), (1035, 0.0975, 0.0375), (1040, 0.1, 0.05), (1045, 0.1, 0.05), (1050, 0.1, 0.05), (1055, 0.1, 0.05), (1060, 0.1, 0.05), (1065, 0.1, 0.05), (1070, 0.1, 0.05), (1075, 0.1, 0.05), (1080, 0.1, 0.05), (1085, 0.1, 0.05), (1090, 0.1, 0.05), (1095, 0.1, 0.05), (1100, 0.1, 0.05), (1105, 0.1, 0.05), (1110, 0.1, 0.05), (1115, 0.1, 0.05), (1120, 0.1, 0.05), (1125, 0.1, 0.05), (1130, 0.1, 0.05), (1135, 0.1, 0.05), (1140, 0.1, 0.05), (1145, 0.1, 0.05), (1150, 0.1, 0.05), (1155, 0.1, 0.05), (1160, 0.1, 0.05), (1165, 0.1, 0.05), (1170, 0.1, 0.05), (1175, 0.1, 0.05), (1180, 0.1, 0.05), (1185, 0.1, 0.05), (1190, 0.1, 0.05), (1195, 0.1, 0.05), (1200, 0.1, 0.05), (1205, 0.1025, 0.0375), (1210, 0.105, 0.025), (1215, 0.1075, 0.0125), (1220, 0.11, 0), (1225, 0.1125, -0.0125), (1230, 0.115, -0.025), (1235, 0.1175, -0.0375), (1240, 0.12, -0.05), (1245, 0.12, -0.05), (1250, 0.12, -0.05), (1255, 0.12, -0.05), (1260, 0.12, -0.05), (1265, 0.12, -0.05), (1270, 0.12, -0.05), (1275, 0.12, -0.05), (1280, 0.12, -0.05), (1285, 0.12, -0.05), (1290, 0.12, -0.05), (1295, 0.12, -0.05), (1300, 0.12, -0.05), (1305, 0.12, -0.05), (1310, 0.12, -0.05), (1315, 0.12, -0.05), (1320, 0.12, -0.05), (1325, 0.12, -0.05), (1330, 0.12, -0.05), (1335, 0.12, -0.05), (1340, 0.12, -0.05), (1345, 0.12, -0.05), (1350, 0.12, -0.05), (1355, 0.12, -0.05), (1360, 0.12, -0.05), (1365, 0.12, -0.05), (1370, 0.12, -0.05), (1375, 0.12, -0.05), (1380, 0.12, -0.05), (1385, 0.12, -0.05), (1390, 0.12, -0.05), (1395, 0.12, -0.05), (1400, 0.12, -0.05), (1405, 0.1225, -0.0375), (1410, 0.125, -0.025), (1415, 0.1275, -0.0125), (1420, 0.13, 0), (1425, 0.1325, 0.0125), (1430, 0.135, 0.025), (1435, 0.1375, 0.0375), (1440, 0.14, 0.05), (1445, 0.14, 0.05), (1450, 0.14, 0.05), (1455, 0.14, 0.05), (1460, 0.14, 0.05), (1465, 0.14, 0.05), (1470, 0.14, 0.05), (1475, 0.14, 0.05), (1480, 0.14, 0.05), (1485, 0.14, 0.05), (1490, 0.14, 0.05), (1495, 0.14, 0.05), 
  ]
  jerk_data = [
    (0, 16.9884, 16.5404), (5, 14.3668, 13.9822), (10, 12.1023, 11.7708), (15, 10.1494, 9.86182), (20, 8.46813, 8.21616), (25, 7.02372, 6.7997), (30, 5.78558, 5.58253), (35, 4.72699, 4.5384), (40, 3.82453, 3.64425), (45, 3.05771, 2.87984), (50, 2.40858, 2.22735), (55, 1.86139, 1.67105), (60, 1.40232, 1.19705), (65, 1.01922, 0.793004), (70, 0.701411, 0.447938), (75, 0.43946, 0.152005), (80, 0.225028, -0.103676), (85, 0.0507081, -0.327183), (90, -0.0901066, -0.52594), (95, -0.203349, -0.706858), (100, -0.294385, -0.876457), (105, -0.368116, -1.04099), (110, -0.429068, -1.20655), (115, -0.481479, -1.37919), (120, -0.529377, -1.56505), (125, -0.576656, -1.77044), (130, -0.627149, -2.00197), (135, -0.684701, -2.26668), (140, -0.753242, -2.57214), (145, -0.836859, -2.92664), (150, -0.939872, -3.33929), (155, -1.06692, -3.8202), (160, -1.22303, -4.38068), (165, -1.41375, -5.03343), (170, -1.64519, -5.79278), (175, -1.92419, -6.67491), (180, -2.25842, -7.69819), (185, -2.65652, -8.8835), (190, -3.12825, -10.2546), (195, -3.68469, -11.8384), (200, -4.33842, -13.6659), (205, -5.10375, -15.772), (210, -5.64663, -17.3212), (215, -5.97906, -18.3426), (220, -6.109, -18.8553), (225, -6.04045, -18.8687), (230, -5.77358, -18.3822), (235, -5.30469, -17.3854), (240, -4.6262, -15.8584), (245, -3.72644, -13.7705), (250, -2.93988, -11.9565), (255, -2.25265, -10.3799), (260, -1.65269, -9.00853), (265, -1.12949, -7.81384), (270, -0.673954, -6.77043), (275, -0.278216, -5.85554), (280, 0.0645041, -5.04872), (285, 0.360008, -4.33139), (290, 0.613228, -3.68657), (295, 0.828309, -3.09852), (300, 1.00868, -2.55251), (305, 1.15714, -2.03452), (310, 1.27584, -1.53097), (315, 1.36641, -1.02853), (320, 1.42992, -0.513852), (325, 1.46691, 0.0266959), (330, 1.47743, 0.607236), (335, 1.46101, 1.24266), (340, 1.41664, 1.94887), (345, 1.34281, 2.74312), (350, 1.23741, 3.64425), (355, 1.09772, 4.6731), (360, 0.920384, 5.85282), (365, 0.701324, 7.20933), (370, 0.435666, 8.77177), (375, 0.117661, 10.573), (380, -0.259419, 12.6502), (385, -0.703407, 15.0457), (390, -1.22337, 17.8072), (395, -1.8298, 20.9895), (400, -2.53475, 24.6545), (405, -3.3521, 28.873), (410, -3.94741, 31.9741), (415, -4.3324, 34.0169), (420, -4.51474, 35.0402), (425, -4.4982, 35.0633), (430, -4.28278, 34.0858), (435, -3.86461, 32.088), (440, -3.23599, 29.0305), (445, -2.38514, 24.8534), (450, -1.64645, 21.2273), (455, -1.006, 18.0805), (460, -0.451643, 15.3501), (465, 0.0271341, 12.9809), (470, 0.439463, 10.9239), (475, 0.793229, 9.1357), (480, 1.09522, 7.57799), (485, 1.35123, 6.21646), (490, 1.5662, 5.02037), (495, 1.74425, 3.96199), (500, 1.88882, 3.01608), (505, 2.00265, 2.15943), (510, 2.08791, 1.37046), (515, 2.14619, 0.628837), (520, 2.17853, -0.0849307), (525, 2.18546, -0.789801), (530, 2.16699, -1.50457), (535, 2.12263, -2.24819), (540, 2.05134, -3.04013), (545, 1.95158, -3.90072), (550, 1.82121, -4.85154), (555, 1.65749, -5.91574), (560, 1.45703, -7.11855), (565, 1.21571, -8.48766), (570, 0.928654, -10.0538), (575, 0.590069, -11.8511), (580, 0.193203, -13.918), (585, -0.269802, -16.2977), (590, -0.808044, -19.039), (595, -1.43203, -22.1973), (600, -2.15384, -25.8352), (605, -2.98738, -30.0241), (610, -3.59826, -33.0936), (615, -3.99817, -35.1031), (620, -4.19483, -36.092), (625, -4.19205, -36.0796), (630, -3.98981, -35.066), (635, -3.5843, -33.0316), (640, -2.96781, -29.9373), (645, -2.1286, -25.7234), (650, -1.40106, -22.0604), (655, -0.771294, -18.8769), (660, -0.227182, -16.1102), (665, 0.241786, -13.7048), (670, 0.64472, -11.612), (675, 0.989493, -9.78851), (680, 1.28287, -8.19594), (685, 1.53065, -6.80005), (690, 1.73774, -5.57011), (695, 1.90825, -4.4784), (700, 2.04561, -3.49968), (705, 2.15256, -2.61076), (710, 2.23124, -1.79004), (715, 2.28324, -1.01717), (720, 2.30958, -0.272672), (725, 2.31079, 0.462443), (730, 2.28687, 1.20698), (735, 2.23731, 1.97992), (740, 2.16107, 2.80074), (745, 2.05659, 3.68981), (750, 1.92173, 4.6687), (755, 1.75374, 5.76062), (760, 1.54922, 6.9908), (765, 1.30406, 8.38698), (770, 1.01334, 9.97985), (775, 0.671293, 11.8037), (780, 0.271147, 13.8969), (785, -0.19496, 16.3026), (790, -0.736133, 19.0698), (795, -1.36288, 22.2538), (800, -2.0873, 25.9173), (805, -2.9233, 30.1317), (810, -3.53647, 33.2266), (815, -3.93854, 35.2615), (820, -4.13722, 36.2757), (825, -4.13632, 36.2887), (830, -3.93584, 35.3005), (835, -3.53195, 33.2916), (840, -2.91696, 30.2229), (845, -2.07913, 26.0347), (850, -1.35286, 22.3975), (855, -0.724243, 19.24), (860, -0.181175, 16.4995), (865, 0.286855, 14.1206), (870, 0.688956, 12.0545), (875, 1.033, 10.258), (880, 1.32574, 8.69282), (885, 1.57298, 7.32462), (890, 1.77962, 6.12277), (895, 1.94979, 5.05955), (900, 2.08689, 4.10977), (905, 2.19366, 3.25025), (910, 2.27226, 2.45945), (915, 2.32426, 1.71704), (920, 2.35069, 1.00356), (925, 2.35206, 0.300071), (930, 2.32839, -0.412205), (935, 2.27915, -1.15221), (940, 2.20333, -1.9394), (945, 2.09933, -2.7941), (950, 1.96504, -3.73785), (955, 1.79769, -4.79381), (960, 1.5939, -5.98719), (965, 1.34953, -7.34567), (970, 1.05969, -8.89993), (975, 0.718597, -10.6842), (980, 0.319481, -12.7368), (985, -0.14552, -15.1009), (990, -0.68551, -17.8254), (995, -1.311, -20.9655), (1000, -2.03408, -24.584), (1005, -2.86866, -28.7522), (1010, -3.48033, -31.7995), (1015, -3.88083, -33.7856), (1020, -4.07785, -34.7497), (1025, -4.07521, -34.711), (1030, -3.87291, -33.6697), (1035, -3.46712, -31.6062), (1040, -2.85013, -28.4813), (1045, -2.01023, -24.2353), (1050, -1.28179, -20.5386), (1055, -0.650922, -17.3199), (1060, -0.105509, -14.5163), (1065, 0.364959, -12.0724), (1070, 0.769593, -9.93945), (1075, 1.11626, -8.07409), (1080, 1.41174, -6.4379), (1085, 1.6618, -4.99659), (1090, 1.87138, -3.71939), (1095, 2.04459, -2.57854), (1100, 2.18483, -1.54875), (1105, 2.29486, -0.606783), (1110, 2.37683, 0.26901), (1115, 2.43231, 1.09903), (1120, 2.46234, 1.90282), (1125, 2.46745, 2.69941), (1130, 2.44762, 3.50767), (1135, 2.40237, 4.34665), (1140, 2.33065, 5.23588), (1145, 2.23091, 6.19579), (1150, 2.101, 7.24804), (1155, 1.93818, 8.41588), (1160, 1.73905, 9.72463), (1165, 1.49951, 11.2021), (1170, 1.21464, 12.879), (1175, 0.878677, 14.7898), (1180, 0.484849, 16.9729), (1185, 0.0252999, 19.4716), (1190, -0.509072, 22.3348), (1195, -1.12877, 25.618), (1200, -1.84589, 29.3841), (1205, -2.67433, 33.7044), (1210, -3.27969, 36.9086), (1215, -3.67368, 39.0565), (1220, -3.86402, 40.1873), (1225, -3.85451, 40.3206), (1230, -3.64514, 39.4565), (1235, -3.2321, 37.5757), (1240, -2.60768, 34.6391), (1245, -1.76014, 30.5871), (1250, -1.02389, 27.0903), (1255, -0.385012, 24.0775), (1260, 0.168588, 21.486), (1265, 0.647419, 19.2606), (1270, 1.06059, 17.3525), (1275, 1.41595, 15.7186), (1280, 1.72027, 14.3206), (1285, 1.97932, 13.1243), (1290, 2.198, 12.0991), (1295, 2.3804, 11.2172), (1300, 2.52992, 10.4535), (1305, 2.64927, 9.78473), (1310, 2.74056, 9.18933), (1315, 2.80533, 8.64687), (1320, 2.84458, 8.13779), (1325, 2.85876, 7.64299), (1330, 2.84781, 7.14347), (1335, 2.81114, 6.62004), (1340, 2.74764, 6.05291), (1345, 2.65563, 5.42135), (1350, 2.53285, 4.70334), (1355, 2.37642, 3.87511), (1360, 2.18279, 2.91077), (1365, 1.94765, 1.78178), (1370, 1.66588, 0.456492), (1375, 1.33145, -1.10048), (1380, 0.937319, -2.92885), (1385, 0.475296, -5.07341), (1390, -0.0640984, -7.58483), (1395, -0.691803, -10.5206), (1400, -1.42041, -13.9458), (1405, -2.26439, -17.9349), (1410, -2.89, -20.8206), (1415, -3.30972, -22.6665), (1420, -3.53209, -23.5161), (1425, -3.56193, -23.3941), (1430, -3.40035, -22.3065), (1435, -3.04483, -20.2405), (1440, -2.48914, -17.1649), (1445, -1.72325, -13.029), (1450, -1.08349, -9.51374), (1455, -0.558174, -6.55966), (1460, -0.137736, -4.11767), (1465, 0.185428, -2.14814), (1470, 0.417105, -0.620245), (1475, 0.561361, 0.488627), (1480, 0.620616, 1.19323), (1485, 0.595687, 1.50072), (1490, 0.4858, 1.4108), (1495, 0.288579, 0.915694), 
  ]
  zmp_data = [
    (0, 0, 0), (5, -0.0023808, -0.00231801), (10, -0.00439207, -0.00427544), (15, -0.00608206, -0.00591915), (20, -0.00749294, -0.00729004), (25, -0.00866151, -0.00842378), (30, -0.0096199, -0.00935147), (35, -0.0103961, -0.0101002), (40, -0.0110146, -0.0106935), (45, -0.0114967, -0.0111518), (50, -0.0118609, -0.0114929), (55, -0.0121234, -0.0117321), (60, -0.012298, -0.0118825), (65, -0.0123969, -0.0119556), (70, -0.0124307, -0.0119609), (75, -0.0124082, -0.0119066), (80, -0.0123373, -0.0117996), (85, -0.0122245, -0.0116455), (90, -0.0120756, -0.0114488), (95, -0.011895, -0.011213), (100, -0.0116868, -0.0109407), (105, -0.011454, -0.0106335), (110, -0.0111991, -0.0102923), (115, -0.010924, -0.00991706), (120, -0.0106299, -0.00950694), (125, -0.0103175, -0.00906024), (130, -0.00998692, -0.00857445), (135, -0.00963782, -0.0080461), (140, -0.00926928, -0.00747081), (145, -0.00887985, -0.00684315), (150, -0.0084675, -0.00615656), (155, -0.00802963, -0.00540326), (160, -0.00756298, -0.0045741), (165, -0.00706361, -0.00365841), (170, -0.00652682, -0.00264381), (175, -0.00594709, -0.00151598), (180, -0.00531796, -0.000258445), (185, -0.00463192, 0.00114775), (190, -0.00388031, 0.00272433), (195, -0.00305314, 0.00449624), (200, -0.00213893, 0.00649201), (205, -0.00112451, 0.00874429), (210, 5.22677e-06, 0.0112905), (215, 0.00121846, 0.0140504), (220, 0.00248499, 0.0169481), (225, 0.0037757, 0.01991), (230, 0.005062, 0.0228636), (235, 0.00631535, 0.0257366), (240, 0.00750671, 0.0284552), (245, 0.00860605, 0.0309429), (250, 0.00958177, 0.0331191), (255, 0.0104493, 0.0350204), (260, 0.0112221, 0.0366787), (265, 0.0119123, 0.0381214), (270, 0.0125303, 0.0393722), (275, 0.0130854, 0.0404512), (280, 0.0135861, 0.0413756), (285, 0.0140396, 0.0421599), (290, 0.0144526, 0.042816), (295, 0.014831, 0.0433534), (300, 0.0151804, 0.0437797), (305, 0.0155056, 0.0441003), (310, 0.0158113, 0.044319), (315, 0.0161018, 0.0444374), (320, 0.0163811, 0.0444555), (325, 0.0166532, 0.0443715), (330, 0.0169221, 0.0441816), (335, 0.0171916, 0.0438804), (340, 0.0174657, 0.0434601), (345, 0.0177485, 0.042911), (350, 0.0180442, 0.042221), (355, 0.0183576, 0.0413755), (360, 0.0186935, 0.040357), (365, 0.0190573, 0.039145), (370, 0.0194551, 0.0377154), (375, 0.0198934, 0.0360403), (380, 0.0203796, 0.0340873), (385, 0.020922, 0.031819), (390, 0.02153, 0.0291924), (395, 0.0222141, 0.0261582), (400, 0.0229863, 0.0226595), (405, 0.0238602, 0.0186313), (410, 0.0248512, 0.0139992), (415, 0.0259277, 0.00892333), (420, 0.0270598, 0.00355604), (425, 0.0282186, -0.00195557), (430, 0.0293756, -0.00746693), (435, 0.0305024, -0.0128334), (440, 0.03157, -0.0179078), (445, 0.0325485, -0.0225376), (450, 0.0334063, -0.0265623), (455, 0.0341589, -0.0300559), (460, 0.0348197, -0.0330829), (465, 0.0354007, -0.0356996), (470, 0.0359125, -0.0379545), (475, 0.0363645, -0.0398899), (480, 0.0367647, -0.0415419), (485, 0.0371207, -0.0429418), (490, 0.0374389, -0.0441161), (495, 0.0377253, -0.0450873), (500, 0.0379853, -0.0458739), (505, 0.0382238, -0.0464913), (510, 0.0384454, -0.0469516), (515, 0.0386541, -0.047264), (520, 0.0388543, -0.047435), (525, 0.0390496, -0.0474683), (530, 0.039244, -0.0473653), (535, 0.0394413, -0.0471247), (540, 0.0396454, -0.0467426), (545, 0.0398603, -0.0462125), (550, 0.0400903, -0.0455252), (555, 0.0403399, -0.0446685), (560, 0.040614, -0.0436271), (565, 0.040918, -0.0423824), (570, 0.0412578, -0.040912), (575, 0.0416399, -0.0391892), (580, 0.0420717, -0.037183), (585, 0.0425613, -0.034857), (590, 0.0431183, -0.0321691), (595, 0.0437529, -0.0290708), (600, 0.0444771, -0.0255059), (605, 0.0453045, -0.0214101), (610, 0.0462505, -0.0167092), (615, 0.0472835, -0.011564), (620, 0.0483734, -0.00612718), (625, 0.0494913, -0.00054609), (630, 0.0506087, 0.00503441), (635, 0.0516971, 0.0104695), (640, 0.0527276, 0.0156117), (645, 0.05367, 0.0203084), (650, 0.054493, 0.024399), (655, 0.0552117, 0.0279574), (660, 0.0558398, 0.031048), (665, 0.0563892, 0.0337269), (670, 0.0568703, 0.0360428), (675, 0.0572925, 0.0380377), (680, 0.057664, 0.039748), (685, 0.057992, 0.0412046), (690, 0.0582832, 0.0424343), (695, 0.0585435, 0.0434594), (700, 0.0587782, 0.0442986), (705, 0.0589921, 0.0449671), (710, 0.0591898, 0.0454772), (715, 0.0593756, 0.0458379), (720, 0.0595534, 0.0460559), (725, 0.0597271, 0.046135), (730, 0.0599006, 0.0460764), (735, 0.0600776, 0.0458788), (740, 0.060262, 0.0455386), (745, 0.0604579, 0.0450491), (750, 0.0606694, 0.0444012), (755, 0.0609011, 0.0435827), (760, 0.0611579, 0.0425785), (765, 0.0614451, 0.0413697), (770, 0.0617686, 0.0399341), (775, 0.062135, 0.0382452), (780, 0.0625515, 0.0362718), (785, 0.0630264, 0.0339776), (790, 0.063569, 0.0313205), (795, 0.0641897, 0.0282521), (800, 0.0649005, 0.0247161), (805, 0.0657149, 0.0206483), (810, 0.0666482, 0.0159746), (815, 0.0676689, 0.0108557), (820, 0.068747, 0.00544437), (825, 0.0698533, -0.000112046), (830, 0.0709596, -0.00566866), (835, 0.0720372, -0.0110806), (840, 0.0730572, -0.0162005), (845, 0.0739895, -0.0208756), (850, 0.0748026, -0.0249452), (855, 0.0755118, -0.0284833), (860, 0.0761306, -0.0315543), (865, 0.076671, -0.0342144), (870, 0.0771434, -0.036512), (875, 0.0775572, -0.0384892), (880, 0.0779204, -0.0401824), (885, 0.0782405, -0.0416227), (890, 0.078524, -0.0428365), (895, 0.0787768, -0.0438463), (900, 0.0790042, -0.0446708), (905, 0.0792111, -0.0453251), (910, 0.079402, -0.0458215), (915, 0.0795811, -0.0461692), (920, 0.0797525, -0.0463746), (925, 0.0799199, -0.0464416), (930, 0.0800873, -0.0463714), (935, 0.0802584, -0.0461629), (940, 0.0804371, -0.0458121), (945, 0.0806274, -0.0453126), (950, 0.0808335, -0.0446551), (955, 0.08106, -0.0438276), (960, 0.0813116, -0.0428147), (965, 0.0815939, -0.0415979), (970, 0.0819125, -0.0401547), (975, 0.0822741, -0.0384586), (980, 0.082686, -0.0364785), (985, 0.0831565, -0.0341781), (990, 0.0836947, -0.0315154), (995, 0.0843111, -0.0284417), (1000, 0.0850178, -0.024901), (1005, 0.0858281, -0.0208289), (1010, 0.0867575, -0.0161515), (1015, 0.0877743, -0.0110294), (1020, 0.0888486, -0.00561527), (1025, 0.0899513, -5.66288e-05), (1030, 0.0910539, 0.00550169), (1035, 0.092128, 0.0109148), (1040, 0.0931445, 0.0160353), (1045, 0.0940734, 0.0207105), (1050, 0.0948832, 0.0247796), (1055, 0.0955891, 0.0283167), (1060, 0.0962048, 0.0313861), (1065, 0.096742, 0.0340439), (1070, 0.0972113, 0.0363386), (1075, 0.097622, 0.0383124), (1080, 0.0979822, 0.0400015), (1085, 0.0982994, 0.0414369), (1090, 0.0985799, 0.0426453), (1095, 0.0988298, 0.0436489), (1100, 0.0990543, 0.0444664), (1105, 0.0992583, 0.0451131), (1110, 0.0994464, 0.0456011), (1115, 0.0996227, 0.0459395), (1120, 0.0997913, 0.0461349), (1125, 0.099956, 0.046191), (1130, 0.100121, 0.046109), (1135, 0.100289, 0.0458878), (1140, 0.100465, 0.0455233), (1145, 0.100652, 0.0450092), (1150, 0.100856, 0.0443362), (1155, 0.101079, 0.043492), (1160, 0.101328, 0.0424614), (1165, 0.101608, 0.0412258), (1170, 0.101924, 0.0397626), (1175, 0.102282, 0.0380454), (1180, 0.102691, 0.0360429), (1185, 0.103159, 0.0337189), (1190, 0.103694, 0.0310312), (1195, 0.104308, 0.0279312), (1200, 0.105012, 0.0243629), (1205, 0.105819, 0.0202617), (1210, 0.106745, 0.0155536), (1215, 0.107759, 0.0103994), (1220, 0.108831, 0.00495158), (1225, 0.10993, -0.000642387), (1230, 0.11103, -0.00623768), (1235, 0.112101, -0.0116895), (1240, 0.113114, -0.0168504), (1245, 0.11404, -0.0215677), (1250, 0.114846, -0.0256809), (1255, 0.115549, -0.0292638), (1260, 0.116161, -0.0323809), (1265, 0.116695, -0.0350883), (1270, 0.117161, -0.0374346), (1275, 0.117569, -0.0394618), (1280, 0.117926, -0.0412062), (1285, 0.11824, -0.0426989), (1290, 0.118517, -0.0439663), (1295, 0.118764, -0.0450308), (1300, 0.118986, -0.0459111), (1305, 0.119187, -0.0466221), (1310, 0.119373, -0.047176), (1315, 0.119547, -0.0475817), (1320, 0.119713, -0.0478456), (1325, 0.119877, -0.0479713), (1330, 0.12004, -0.0479597), (1335, 0.120207, -0.0478093), (1340, 0.120383, -0.0475157), (1345, 0.120571, -0.047072), (1350, 0.120776, -0.0464685), (1355, 0.121002, -0.0456924), (1360, 0.121254, -0.0447275), (1365, 0.121538, -0.0435544), (1370, 0.12186, -0.0421496), (1375, 0.122226, -0.0404855), (1380, 0.122645, -0.0385293), (1385, 0.123125, -0.0362434), (1390, 0.123675, -0.0335836), (1395, 0.124306, -0.0304993), (1400, 0.125031, -0.0269319), (1405, 0.125864, -0.0228141), (1410, 0.126821, -0.0180687), (1415, 0.12787, -0.0128526), (1420, 0.128983, -0.00731399), (1425, 0.130132, -0.0015954), (1430, 0.131289, 0.00416408), (1435, 0.132426, 0.00982618), (1440, 0.133517, 0.015251), (1445, 0.134533, 0.0202946), (1450, 0.135444, 0.0248061), (1455, 0.136268, 0.028871), (1460, 0.137019, 0.0325667), (1465, 0.137714, 0.035964), (1470, 0.138366, 0.0391289), (1475, 0.138987, 0.0421227), (1480, 0.13959, 0.0450043), (1485, 0.140187, 0.0478302), (1490, 0.140789, 0.0506564), (1495, 0.141409, 0.0535387), 
  ]
  com_data = [
    (0, 0, 0), (5, 3.53926e-07, 3.44592e-07), (10, 2.77679e-06, 2.70344e-06), (15, 9.07188e-06, 8.83154e-06), (20, 2.07585e-05, 2.02066e-05), (25, 3.91109e-05, 3.80667e-05), (30, 6.51926e-05, 6.34438e-05), (35, 9.98858e-05, 9.71919e-05), (40, 0.000143918, 0.000140012), (45, 0.000197882, 0.000192476), (50, 0.00026226, 0.00025504), (55, 0.000337436, 0.000328068), (60, 0.000423713, 0.00041184), (65, 0.000521326, 0.000506566), (70, 0.000630452, 0.000612398), (75, 0.00075122, 0.000729436), (80, 0.000883718, 0.000857737), (85, 0.001028, 0.00099732), (90, 0.0011841, 0.00114817), (95, 0.00135202, 0.00131026), (100, 0.00153176, 0.00148351), (105, 0.00172328, 0.00166783), (110, 0.00192655, 0.00186312), (115, 0.00214152, 0.00206925), (120, 0.00236815, 0.00228607), (125, 0.00260636, 0.0025134), (130, 0.0028561, 0.00275104), (135, 0.0031173, 0.00299878), (140, 0.00338986, 0.00325637), (145, 0.00367372, 0.00352352), (150, 0.00396877, 0.0037999), (155, 0.00427491, 0.00408515), (160, 0.00459202, 0.00437886), (165, 0.00491996, 0.00468054), (170, 0.00525859, 0.00498964), (175, 0.00560773, 0.00530554), (180, 0.00596716, 0.0056275), (185, 0.00633665, 0.00595469), (190, 0.00671592, 0.00628614), (195, 0.00710462, 0.00662073), (200, 0.00750237, 0.00695719), (205, 0.00790871, 0.00729403), (210, 0.00832309, 0.00762953), (215, 0.00874487, 0.00796173), (220, 0.00917336, 0.00828848), (225, 0.00960781, 0.0086075), (230, 0.0100475, 0.00891643), (235, 0.0104916, 0.00921294), (240, 0.0109394, 0.00949474), (245, 0.0113903, 0.00975965), (250, 0.0118437, 0.0100057), (255, 0.0122992, 0.0102312), (260, 0.0127563, 0.0104346), (265, 0.0132148, 0.0106147), (270, 0.0136745, 0.0107702), (275, 0.0141352, 0.0109003), (280, 0.0145968, 0.011004), (285, 0.0150594, 0.0110806), (290, 0.0155228, 0.0111296), (295, 0.0159873, 0.0111503), (300, 0.0164527, 0.0111422), (305, 0.0169193, 0.0111051), (310, 0.0173872, 0.0110386), (315, 0.0178564, 0.0109424), (320, 0.0183273, 0.0108164), (325, 0.0187999, 0.0106603), (330, 0.0192744, 0.0104743), (335, 0.0197509, 0.0102581), (340, 0.0202298, 0.010012), (345, 0.0207111, 0.00973607), (350, 0.0211951, 0.00943058), (355, 0.0216819, 0.00909586), (360, 0.0221716, 0.00873237), (365, 0.0226645, 0.0083407), (370, 0.0231605, 0.00792159), (375, 0.0236599, 0.00747595), (380, 0.0241626, 0.00700486), (385, 0.0246687, 0.00650967), (390, 0.0251781, 0.00599195), (395, 0.0256907, 0.0054536), (400, 0.0262065, 0.00489686), (405, 0.0267251, 0.00432435), (410, 0.0272462, 0.00373916), (415, 0.0277694, 0.00314489), (420, 0.0282943, 0.00254552), (425, 0.0288203, 0.00194526), (430, 0.0293468, 0.00134848), (435, 0.0298733, 0.000759538), (440, 0.0303993, 0.000182681), (445, 0.0309242, -0.000378106), (450, 0.0314477, -0.000919219), (455, 0.0319695, -0.00143754), (460, 0.0324893, -0.0019304), (465, 0.033007, -0.00239554), (470, 0.0335227, -0.00283102), (475, 0.0340362, -0.00323523), (480, 0.0345476, -0.00360678), (485, 0.0350571, -0.00394453), (490, 0.0355647, -0.00424753), (495, 0.0360706, -0.00451501), (500, 0.0365751, -0.00474632), (505, 0.0370784, -0.00494097), (510, 0.0375806, -0.00509859), (515, 0.038082, -0.00521889), (520, 0.038583, -0.00530172), (525, 0.0390837, -0.00534698), (530, 0.0395844, -0.0053547), (535, 0.0400854, -0.00532496), (540, 0.040587, -0.00525796), (545, 0.0410894, -0.00515398), (550, 0.041593, -0.00501341), (555, 0.0420979, -0.00483672), (560, 0.0426043, -0.00462453), (565, 0.0431125, -0.00437759), (570, 0.0436227, -0.00409678), (575, 0.0441349, -0.00378317), (580, 0.0446494, -0.00343802), (585, 0.0451662, -0.00306282), (590, 0.0456853, -0.00265932), (595, 0.0462066, -0.00222955), (600, 0.0467302, -0.00177591), (605, 0.0472557, -0.00130119), (610, 0.0477829, -0.000808621), (615, 0.0483115, -0.000301935), (620, 0.0488411, 0.000214753), (625, 0.049371, 0.000737077), (630, 0.0499008, 0.00126054), (635, 0.05043, 0.00178067), (640, 0.0509581, 0.00229309), (645, 0.0514846, 0.00279369), (650, 0.0520092, 0.00327876), (655, 0.0525316, 0.00374507), (660, 0.0530516, 0.00418986), (665, 0.0535691, 0.00461075), (670, 0.0540841, 0.00500572), (675, 0.0545966, 0.00537306), (680, 0.0551068, 0.00571131), (685, 0.0556147, 0.00601923), (690, 0.0561204, 0.00629581), (695, 0.0566242, 0.00654018), (700, 0.0571264, 0.00675165), (705, 0.057627, 0.00692965), (710, 0.0581265, 0.00707375), (715, 0.058625, 0.00718362), (720, 0.0591228, 0.00725903), (725, 0.0596202, 0.00729986), (730, 0.0601176, 0.00730607), (735, 0.0606151, 0.00727772), (740, 0.0611131, 0.00721496), (745, 0.0616119, 0.00711804), (750, 0.0621117, 0.00698731), (755, 0.0626128, 0.00682323), (760, 0.0631154, 0.00662639), (765, 0.0636197, 0.00639752), (770, 0.064126, 0.00613749), (775, 0.0646344, 0.00584735), (780, 0.065145, 0.00552835), (785, 0.0656579, 0.00518198), (790, 0.0661731, 0.00480998), (795, 0.0666907, 0.0044144), (800, 0.0672105, 0.00399762), (805, 0.0677323, 0.00356244), (810, 0.0682559, 0.00311212), (815, 0.0687809, 0.00265038), (820, 0.0693069, 0.00218137), (825, 0.0698334, 0.00170947), (830, 0.0703599, 0.0012392), (835, 0.0708858, 0.000775067), (840, 0.0714108, 0.000321465), (845, 0.0719342, -0.000117467), (850, 0.0724559, -0.000537973), (855, 0.0729755, -0.000936789), (860, 0.0734928, -0.0013111), (865, 0.0740078, -0.0016585), (870, 0.0745204, -0.00197692), (875, 0.0750307, -0.00226458), (880, 0.0755388, -0.00251997), (885, 0.0760447, -0.00274181), (890, 0.0765487, -0.002929), (895, 0.0770509, -0.00308062), (900, 0.0775516, -0.00319592), (905, 0.078051, -0.00327424), (910, 0.0785494, -0.00331508), (915, 0.079047, -0.00331803), (920, 0.0795441, -0.00328277), (925, 0.080041, -0.00320911), (930, 0.0805381, -0.0030969), (935, 0.0810355, -0.00294611), (940, 0.0815337, -0.0027568), (945, 0.0820328, -0.00252911), (950, 0.0825332, -0.00226328), (955, 0.0830351, -0.00195966), (960, 0.0835387, -0.00161873), (965, 0.0840443, -0.00124108), (970, 0.0845521, -0.000827468), (975, 0.0850623, -0.000378817), (980, 0.0855749, 0.000103757), (985, 0.0860901, 0.000618912), (990, 0.0866079, 0.00116505), (995, 0.0871283, 0.00174028), (1000, 0.0876512, 0.00234236), (1005, 0.0881764, 0.00296866), (1010, 0.0887037, 0.00361609), (1015, 0.0892328, 0.00428109), (1020, 0.0897631, 0.00495971), (1025, 0.0902942, 0.00564773), (1030, 0.0908256, 0.00634085), (1035, 0.0913569, 0.00703473), (1040, 0.0918874, 0.0077252), (1045, 0.0924169, 0.00840832), (1050, 0.0929449, 0.00908055), (1055, 0.0934711, 0.00973887), (1060, 0.0939955, 0.0103807), (1065, 0.094518, 0.0110038), (1070, 0.0950384, 0.0116065), (1075, 0.095557, 0.0121871), (1080, 0.0960737, 0.0127445), (1085, 0.0965887, 0.0132776), (1090, 0.0971022, 0.0137856), (1095, 0.0976144, 0.0142679), (1100, 0.0981254, 0.014724), (1105, 0.0986357, 0.0151536), (1110, 0.0991454, 0.0155565), (1115, 0.0996549, 0.0159327), (1120, 0.100164, 0.0162821), (1125, 0.100674, 0.0166049), (1130, 0.101185, 0.0169013), (1135, 0.101696, 0.0171717), (1140, 0.102209, 0.0174165), (1145, 0.102723, 0.0176362), (1150, 0.103239, 0.0178316), (1155, 0.103757, 0.0180033), (1160, 0.104278, 0.0181524), (1165, 0.104801, 0.0182798), (1170, 0.105327, 0.0183867), (1175, 0.105856, 0.0184747), (1180, 0.106388, 0.0185452), (1185, 0.106924, 0.0186001), (1190, 0.107463, 0.0186416), (1195, 0.108005, 0.0186722), (1200, 0.10855, 0.0186945), (1205, 0.109099, 0.0187119), (1210, 0.109651, 0.018728), (1215, 0.110205, 0.0187469), (1220, 0.110761, 0.0187734), (1225, 0.111319, 0.0188122), (1230, 0.111878, 0.0188684), (1235, 0.112438, 0.0189469), (1240, 0.112999, 0.0190527), (1245, 0.113559, 0.0191905), (1250, 0.114119, 0.0193645), (1255, 0.114678, 0.0195787), (1260, 0.115236, 0.0198363), (1265, 0.115794, 0.0201405), (1270, 0.116351, 0.0204938), (1275, 0.116907, 0.0208988), (1280, 0.117462, 0.0213576), (1285, 0.118018, 0.0218721), (1290, 0.118572, 0.0224442), (1295, 0.119127, 0.0230756), (1300, 0.119683, 0.0237676), (1305, 0.120239, 0.0245217), (1310, 0.120796, 0.0253393), (1315, 0.121354, 0.0262216), (1320, 0.121913, 0.0271696), (1325, 0.122475, 0.0281846), (1330, 0.123039, 0.0292674), (1335, 0.123606, 0.0304191), (1340, 0.124176, 0.0316406), (1345, 0.124749, 0.0329326), (1350, 0.125326, 0.034296), (1355, 0.125907, 0.0357314), (1360, 0.126492, 0.0372394), (1365, 0.127082, 0.0388205), (1370, 0.127677, 0.040475), (1375, 0.128277, 0.0422032), (1380, 0.128882, 0.0440051), (1385, 0.129493, 0.0458805), (1390, 0.13011, 0.0478292), (1395, 0.130732, 0.0498504), (1400, 0.13136, 0.0519432), (1405, 0.131994, 0.0541062), (1410, 0.132633, 0.0563378), (1415, 0.133278, 0.0586357), (1420, 0.133927, 0.0609973), (1425, 0.134581, 0.0634198), (1430, 0.135238, 0.0659003), (1435, 0.135899, 0.0684358), (1440, 0.136563, 0.0710237), (1445, 0.13723, 0.0736614), (1450, 0.1379, 0.0763467), (1455, 0.138571, 0.0790781), (1460, 0.139245, 0.0818544), (1465, 0.13992, 0.0846746), (1470, 0.140598, 0.0875383), (1475, 0.141278, 0.0904453), (1480, 0.141959, 0.0933953), (1485, 0.142643, 0.0963885), (1490, 0.143329, 0.099425), (1495, 0.144017, 0.102505)
  ]

  # Unpack data
  t, zmp_ref_x, zmp_ref_y = zip(*zmp_ref_data)
  t, zmp_x, zmp_y = zip(*zmp_data)
  t, com_x, com_y = zip(*com_data)

  # Create plots
  plt.figure(figsize=(15, 10))

  # y vs x
  plt.subplot(3, 1, 1)
  plt.plot(zmp_ref_x, zmp_ref_y, label='zmp_ref_y vs. zmp_ref_x', color='black')
  plt.plot(zmp_x, zmp_y, label='zmp_y vs. zmp_x', color='blue')
  plt.plot(com_x, com_y, label='com_y vs. com_x', color='red')
  plt.xlabel('x')
  plt.ylabel('y')
  plt.title('Plot of y vs. x')
  plt.grid(True)

  # x vs t
  plt.subplot(3, 1, 2)
  plt.plot(t, zmp_ref_x, label='zmp_ref_x vs. t', color='black')
  plt.plot(t, zmp_x, label='zmp_x vs. t', color='blue')
  plt.plot(t, com_x, label='com_x vs. t', color='red')
  plt.xlabel('t')
  plt.ylabel('x')
  plt.title('Plot of x vs. t')
  plt.grid(True)

  # y vs t
  plt.subplot(3, 1, 3)
  plt.plot(t, zmp_ref_y, label='zmp_ref_y vs. t', color='black')
  plt.plot(t, zmp_y, label='zmp_y vs. t', color='blue')
  plt.plot(t, com_y, label='com_y vs. t', color='red')
  plt.xlabel('t')
  plt.ylabel('y')
  plt.title('Plot of y vs. t')
  plt.grid(True)

  plt.tight_layout()
  plt.show()

def f3():
  jerk_data = [
    (0, 0, 0), (5, 0, 0), (10, 0, 0), (15, 0, 0), (20, 0, 0), (25, 0, 0), (30, 0, 0), (35, 0, 0), (40, 0, 0), (45, 0, 0), (50, 0, 0), (55, 0, 0), (60, 0, 0), (65, 0, 0), (70, 0, 0), (75, 0, 0), (80, 0, 0), (85, 0, 0), (90, 0, 0), (95, 0, 0), (100, 0, 0), (105, 0, 0), (110, 0, 0), (115, 0, 0), (120, 0, 0), (125, 0, 0), (130, 0, 0), (135, 0, 0), (140, 0, 0), (145, 0, 0), (150, 0, 0), (155, 0, 0), (160, 0, 0), (165, 0, 0), (170, 0, 0), (175, 0, 0), (180, 0, 0), (185, 0, 0), (190, 0, 0), (195, 0, 0), (200, 0, -0.00594794), (205, 0, -0.011816), (210, 0, -0.0176064), (215, 0, -0.0233217), (220, 0, -0.0289638), (225, 0, -0.034535), (230, 0, -0.0400371), (235, 0, -0.0454721), (240, 0, -0.0454709), (245, 0, -0.0454697), (250, 0, -0.0454684), (255, 0, -0.0454672), (260, 0, -0.045466), (265, 0, -0.0454648), (270, 0, -0.0454636), (275, 0, -0.0454625), (280, 0, -0.0454613), (285, 0, -0.0454602), (290, 0, -0.0454591), (295, 0, -0.045458), (300, 0, -0.0454569), (305, 0, -0.0454558), (310, 0, -0.0454548), (315, 0, -0.0454537), (320, 0, -0.0454527), (325, 0, -0.0454518), (330, 0, -0.0454508), (335, 0, -0.0454499), (340, 0, -0.045449), (345, 0, -0.0454481), (350, 0, -0.0454473), (355, 0, -0.0454465), (360, 0, -0.0454457), (365, 0, -0.0454449), (370, 0, -0.0454442), (375, 0, -0.0454436), (380, 0, -0.0454429), (385, 0, -0.0454423), (390, 0, -0.0454417), (395, 0, -0.0454412), (400, 0, -0.0345013), (405, 0, -0.0232862), (410, 0, -0.0117797), (415, 0, 3.1924e-05), (420, 0, 0.0118511), (425, 0, 0.023356), (430, 0, 0.0345689), (435, 0, 0.0455058), (440, 0, 0.0455035), (445, 0, 0.0455011), (450, 0, 0.0454986), (455, 0, 0.0454962), (460, 0, 0.0454937), (465, 0, 0.0454911), (470, 0, 0.0454886), (475, 0, 0.045486), (480, 0, 0.0454833), (485, 0, 0.0454807), (490, 0, 0.045478), (495, 0, 0.0454752), (500, 0, 0.0454725), (505, 0, 0.0454697), (510, 0, 0.0454669), (515, 0, 0.0454641), (520, 0, 0.0454613), (525, 0, 0.0454584), (530, 0, 0.0454555), (535, 0, 0.0454526), (540, 0, 0.0454497), (545, 0, 0.0454468), (550, 0, 0.0454438), (555, 0, 0.0454409), (560, 0, 0.0454379), (565, 0, 0.0454349), (570, 0, 0.0454319), (575, 0, 0.0454289), (580, 0, 0.0454259), (585, 0, 0.0454228), (590, 0, 0.0454198), (595, 0, 0.0454168), (600, 0, 0.0344741), (605, 0, 0.0232562), (610, 0, 0.0117468), (615, 0, -6.36224e-05), (620, 0, -0.0118895), (625, 0, -0.023397), (630, 0, -0.0346124), (635, 0, -0.045552), (640, 0, -0.0455526), (645, 0, -0.0455531), (650, 0, -0.0455537), (655, 0, -0.0455543), (660, 0, -0.0455549), (665, 0, -0.0455555), (670, 0, -0.0455561), (675, 0, -0.0455567), (680, 0, -0.0455573), (685, 0, -0.045558), (690, 0, -0.0455587), (695, 0, -0.0455594), (700, 0, -0.0455601), (705, 0, -0.0455608), (710, 0, -0.0455615), (715, 0, -0.0455623), (720, 0, -0.0455631), (725, 0, -0.0455639), (730, 0, -0.0455648), (735, 0, -0.0455656), (740, 0, -0.0455665), (745, 0, -0.0455674), (750, 0, -0.0455684), (755, 0, -0.0455694), (760, 0, -0.0455704), (765, 0, -0.0455714), (770, 0, -0.0455725), (775, 0, -0.0455737), (780, 0, -0.0455748), (785, 0, -0.045576), (790, 0, -0.0455772), (795, 0, -0.0455785), (800, 0, -0.0346413), (805, 0, -0.0234289), (810, 0, -0.0119251), (815, 0, -9.91122e-05), (820, 0, 0.0117019), (825, 0, 0.0232061), (830, 0, 0.034418), (835, 0, 0.0453542), (840, 0, 0.04535), (845, 0, 0.0453458), (850, 0, 0.0453416), (855, 0, 0.0453373), (860, 0, 0.045333), (865, 0, 0.0453287), (870, 0, 0.0453243), (875, 0, 0.0453199), (880, 0, 0.0453155), (885, 0, 0.045311), (890, 0, 0.0453066), (895, 0, 0.045302), (900, 0, 0.0452975), (905, 0, 0.0452929), (910, 0, 0.0452883), (915, 0, 0.0452837), (920, 0, 0.0452791), (925, 0, 0.0452744), (930, 0, 0.0452697), (935, 0, 0.045265), (940, 0, 0.0452603), (945, 0, 0.0452556), (950, 0, 0.0452509), (955, 0, 0.0452461), (960, 0, 0.0452413), (965, 0, 0.0452365), (970, 0, 0.0452317), (975, 0, 0.0452269), (980, 0, 0.0452221), (985, 0, 0.0452173), (990, 0, 0.0452125), (995, 0, 0.0452076), (1000, 0, 0.0342619), (1005, 0, 0.0230407), (1010, 0, 0.0115281), (1015, 0, -0.000259718), (1020, 0, -0.0121117), (1025, 0, -0.0236196), (1030, 0, -0.0348354), (1035, 0, -0.0457753), (1040, 0, -0.0457777), (1045, 0, -0.0457801), (1050, 0, -0.0457824), (1055, 0, -0.0457848), (1060, 0, -0.0457872), (1065, 0, -0.0457896), (1070, 0, -0.045792), (1075, 0, -0.0457944), (1080, 0, -0.0457968), (1085, 0, -0.0457993), (1090, 0, -0.0458018), (1095, 0, -0.0458042), (1100, 0, -0.0458067), (1105, 0, -0.0458093), (1110, 0, -0.0458118), (1115, 0, -0.0458144), (1120, 0, -0.045817), (1125, 0, -0.0458196), (1130, 0, -0.0458222), (1135, 0, -0.0458249), (1140, 0, -0.0458276), (1145, 0, -0.0458303), (1150, 0, -0.045833), (1155, 0, -0.0458358), (1160, 0, -0.0458386), (1165, 0, -0.0458415), (1170, 0, -0.0458444), (1175, 0, -0.0458473), (1180, 0, -0.0458502), (1185, 0, -0.0458532), (1190, 0, -0.0458562), (1195, 0, -0.0458593), (1200, 0, -0.0349257), (1205, 0, -0.023717), (1210, 0, -0.0122169), (1215, 0, -0.000360334), (1220, 0, 0.0114062), (1225, 0, 0.0229104), (1230, 0, 0.0341225), (1235, 0, 0.0450587), (1240, 0, 0.0450527), (1245, 0, 0.0450467), (1250, 0, 0.0450407), (1255, 0, 0.0450346), (1260, 0, 0.0450285), (1265, 0, 0.0450224), (1270, 0, 0.0450162), (1275, 0, 0.04501), (1280, 0, 0.0450038), (1285, 0, 0.0449975), (1290, 0, 0.0449912), (1295, 0, 0.0449849), (1300, 0, 0.0449785), (1305, 0, 0.0449722), (1310, 0, 0.0449658), (1315, 0, 0.0449593), (1320, 0, 0.0449529), (1325, 0, 0.0449464), (1330, 0, 0.04494), (1335, 0, 0.0449334), (1340, 0, 0.0449269), (1345, 0, 0.0449204), (1350, 0, 0.0449138), (1355, 0, 0.0449073), (1360, 0, 0.0449007), (1365, 0, 0.0448941), (1370, 0, 0.0448875), (1375, 0, 0.0448809), (1380, 0, 0.0448742), (1385, 0, 0.0448676), (1390, 0, 0.044861), (1395, 0, 0.0448543), (1400, 0, 0.0339045), (1405, 0, 0.0226792), (1410, 0, 0.0111623), (1415, 0, -0.000586099), (1420, 0, -0.0124805), (1425, 0, -0.0239878), (1430, 0, -0.0352031), (1435, 0, -0.0461424), (1440, 0, -0.0461466), (1445, 0, -0.0461508), (1450, 0, -0.0461549), (1455, 0, -0.0461591), (1460, 0, -0.0461633), (1465, 0, -0.0461675), (1470, 0, -0.0461717), (1475, 0, -0.0461759), (1480, 0, -0.0461802), (1485, 0, -0.0461844), (1490, 0, -0.0461887), (1495, 0, -0.000649737), 
  ]

   # Extract time, jerk_x, and jerk_y from data
  t, xddd, yddd = zip(*jerk_data)

  # Create plots
  plt.figure(figsize=(15, 10))

  # x vs t
  plt.subplot(2, 1, 1)
  plt.plot(t, xddd, label='xddd vs. t', color='orange')
  plt.xlabel('t')
  plt.ylabel('xddd')
  plt.title('Plot of xddd vs. t')
  plt.grid(True)

  # y vs t
  plt.subplot(2, 1, 2)
  plt.plot(t, yddd, label='yddd vs. t', color='green')
  plt.xlabel('t')
  plt.ylabel('yddd')
  plt.title('Plot of yddd vs. t')
  plt.grid(True)

  plt.tight_layout()
  plt.show()

# f1()
# f2()
# f3()

def f4():
  N = 300
  ts = 5
  T = 300
  TH = T/2
  T2 = T/10
  T1 = TH - T2
  T3 = 2 * T2 + T1
  FLOATING_X = -10
  FLOATING_Y = 100
  
  L = 20
  W = 50
  H = 20

  left_foots = []
  right_foots = []

  zmp_x = []
  zmp_y = []

  for i in range(N):
    t = i * ts
    left_step_num = (t + TH)//T
    right_step_num = t//T
    left_foot_floating = False
    right_foot_floating = False

    left_foot_x_offset = 0
    left_foot_x_slope = L
    if (t + TH) % T < T3:
      left_foot_x = left_foot_x_offset + left_step_num * L
      left_foot_y = W
      left_foot_z = 0
    else:
       left_foot_x = left_foot_x_offset + left_step_num * L + (left_foot_x_slope * ((t + TH) % T - T3))/T1
       left_foot_y = W
       left_foot_z = H * np.sin(np.pi/T1 * (t % TH - T2))
       left_foot_floating = True
    
    right_foot_x_offset = 0 if t < T else 0 + L/2
    right_foot_x_slope = L * 1.5 if t < T else L
    if t % T < T3:
      right_foot_x = right_foot_x_offset + right_step_num * L
      right_foot_y = -W
      right_foot_z = 0
    else:
      right_foot_x = right_foot_x_offset + right_step_num * L + (right_foot_x_slope * ((t % T) - T3))/T1
      right_foot_y = -W
      right_foot_z = H * np.sin(np.pi/T1 * (t % TH - T2))
      right_foot_floating = True

    left_foots.append((t, left_foot_x, left_foot_y, left_foot_z))
    right_foots.append((t, right_foot_x, right_foot_y, right_foot_z))

    if not left_foot_floating and right_foot_floating:
      zmp_x.append(left_foot_x)
      zmp_y.append(left_foot_y)
    elif left_foot_floating and not right_foot_floating:
      zmp_x.append(right_foot_x)
      zmp_y.append(right_foot_y)
    else:
      if left_foot_x > right_foot_x:
        x = right_foot_x + (left_foot_x - right_foot_x) * (t % TH)/T2
      else:
        x = left_foot_x + (right_foot_x - left_foot_x) * (t % TH)/T2
      if t % T < T2:
        y = left_foot_y + (right_foot_y - left_foot_y) * (t % TH)/T2
      else:
        y = right_foot_y + (left_foot_y - right_foot_y) * (t % TH)/T2
      zmp_x.append(x)
      zmp_y.append(y)
  
  # Unpack data
  t_left, left_x, left_y, left_z = zip(*left_foots)
  t_right, right_x, right_y, right_z = zip(*right_foots)

  # Create plots
  plt.figure(figsize=(15, 10))

  # Y vs X
  plt.subplot(3, 1, 1)
  # plt.plot(left_x, left_y, label='Left Foot Y vs. X', color='blue', alpha=0.5)
  # plt.plot(right_x, right_y, label='Right Foot Y vs. X', color='orange', alpha=0.5)
  plt.plot(zmp_x, zmp_y, label='ZMP Y vs. X', color='gray', alpha=1.0)
  plt.xlabel('X Position')
  plt.ylabel('Y Position')
  plt.title('Plot of Foot Y Position vs. X Position')
  # plt.grid(True)
  plt.legend()
  
  # X vs t
  plt.subplot(3, 1, 2)
  for i in range((N * ts)//int(TH)):
    plt.axvline(x=i*TH, color='red', linestyle='--', alpha=0.5)
    plt.axvline(x=i*TH + T2, color='green', linestyle='--', alpha=0.5)

  plt.scatter(t_left, left_x, label='Left Foot X vs. t', color='blue', alpha=0.5)
  plt.scatter(t_right, right_x, label='Right Foot X vs. t', color='orange', alpha=0.5)
  plt.plot(t_left, zmp_x, label='ZMP X vs. t', color='gray', alpha=1.0)
  plt.xlabel('t')
  plt.ylabel('X Position')
  plt.title('Plot of Foot X Position vs. Time')
  # plt.grid(True)
  plt.legend()

  # Y vs t
  plt.subplot(3, 1, 3)
  for i in range((N * ts)//int(TH)):
    plt.axvline(x=i*TH, color='red', linestyle='--', alpha=0.5)
    plt.axvline(x=i*TH + T2, color='green', linestyle='--', alpha=0.5)
    
  plt.scatter(t_left, left_y, label='Left Foot Y vs. t', color='blue', alpha=0.5)
  plt.scatter(t_right, right_y, label='Right Foot Y vs. t', color='orange', alpha=0.5)
  plt.plot(t_left, zmp_y, label='ZMP Y vs. t', color='gray', alpha=1.0)
  plt.xlabel('t')
  plt.ylabel('Y Position')
  plt.title('Plot of Foot Y Position vs. Time')
  # plt.grid(True)
  plt.legend()
  plt.tight_layout()
  plt.show()

  # plot 3D foot trajectory
  fig = plt.figure(figsize=(15, 10))
  ax = fig.add_subplot(111, projection='3d')
  ax.plot(left_x, left_y, left_z, label='Left Foot Trajectory', color='blue', alpha=0.5)
  ax.plot(right_x, right_y, right_z, label='Right Foot Trajectory', color='orange', alpha=0.5)
  ax.plot(zmp_x, zmp_y, zs=0, label='ZMP Trajectory', color='gray', alpha=1.0)
  ax.set_xlabel('X Position')
  ax.set_ylabel('Y Position')
  ax.set_zlabel('Z Position')
  ax.set_title('3D Foot Trajectory')
  ax.legend()
  plt.show()


# f4()

def f5():
  # Function to parse the data file
  def parse_file(file_path):
      indices = []

      left_x = []
      left_y = []
      left_z = []

      right_x = []
      right_y = []
      right_z = []

      line_num = 0
      
      with open(file_path, 'r') as file:
          lines = file.readlines()[3:]
          for i in range(0, len(lines), 3):  # Each entry has 3 lines
              # Parse index
              index = int(lines[i].split()[0])
              indices.append(index)
              
              # Parse left foot X
              left_x_value = float(lines[i].split(':')[1].split(',')[0].strip())
              left_x.append(left_x_value)
              left_y_value = float(lines[i].split(':')[1].split(',')[1].strip())
              left_y.append(left_y_value)
              left_z_value = float(lines[i].split(':')[1].split(',')[2].strip())
              left_z.append(left_z_value)
              
              # Parse right foot X
              right_x_value = float(lines[i + 1].split(':')[1].split(',')[0].strip())
              right_x.append(right_x_value)
              right_y_value = float(lines[i].split(':')[1].split(',')[1].strip())
              right_y.append(right_y_value)
              right_z_value = float(lines[i].split(':')[1].split(',')[2].strip())
              right_z.append(right_z_value)
      
      return indices, left_x, left_y, left_z, right_x, right_y, right_z

  # Parse both files
  indices_feedback, left_x_feedback, left_y_feedback, left_z_feedback, right_x_feedback, right_y_feedback, right_z_feedback = parse_file("./src/shi2d2_planner/debug_data/footsteps_with_feedback.txt")
  indices_no_feedback, left_x_no_feedback, left_y_no_feedback, left_z_no_feedback, right_x_no_feedback, right_y_no_feedback, right_z_no_feedback = parse_file("./src/shi2d2_planner/debug_data/footsteps_no_feedback.txt")

  # Plot the data
  plt.figure(figsize=(10, 6))

  # Plot no feedback data
  plt.plot(indices_no_feedback, left_x_no_feedback, label="Left Foot (No Feedback)", color="red")
  plt.plot(indices_no_feedback, right_x_no_feedback, label="Right Foot (No Feedback)", color="orange")

  # Plot feedback data
  plt.plot(indices_feedback, left_x_feedback, label="Left Foot (Feedback)", color="blue")
  plt.plot(indices_feedback, right_x_feedback, label="Right Foot (Feedback)", color="cyan")

  # Add labels, legend, and grid
  plt.xlabel("Index")
  plt.ylabel("X Position")
  plt.title("Foot Pose X Position vs Index")
  plt.legend()
  plt.grid(True)

  # Show the plot
  plt.show()

# f5()

def f6():
  def parse_data(file_path):
    # Initialize lists to store parsed data
    indices = []
    zmp_ref_x = []
    zmp_ref_y = []
    x = []
    x_dot = []
    x_ddot = []
    y = []
    y_dot = []
    y_ddot = []
    u_x = []
    u_y = []

    # Regular expressions to extract data
    index_pattern = r"Solving ZMP MPC for (?:i|k)=(\d+)"
    zmp_ref_pattern = r"ZMP REF X=([\d\.\-e]+), Y=([\d\.\-e]+)"
    x_pattern = r"X=([\d\.\-e]+), ([\d\.\-e]+), ([\d\.\-e]+)"
    y_pattern = r"Y=([\d\.\-e]+), ([\d\.\-e]+), ([\d\.\-e]+)"
    u_pattern = r"Ux=([\d\.\-e]+), Uy=([\d\.\-e]+)"

    # Read the file and parse data
    with open(file_path, 'r') as file:
        j = 0
        for line in file:
            # Match each line with the corresponding pattern
            index_match = re.search(index_pattern, line)
            zmp_ref_match = re.search(zmp_ref_pattern, line)
            x_match = re.search(x_pattern, line)
            y_match = re.search(y_pattern, line)
            u_match = re.search(u_pattern, line)

            # Extract and append data
            if index_match:
                indices.append(int(index_match.group(1)))
            if zmp_ref_match:
                zmp_ref_x.append(float(zmp_ref_match.group(1)))
                zmp_ref_y.append(float(zmp_ref_match.group(2)))
            if x_match:
                x.append(float(x_match.group(1)))
                x_dot.append(float(x_match.group(2)))
                x_ddot.append(float(x_match.group(3)))
            if y_match:
                y.append(float(y_match.group(1)))
                y_dot.append(float(y_match.group(2)))
                y_ddot.append(float(y_match.group(3)))
            if u_match:
                u_x.append(float(u_match.group(1)))
                u_y.append(float(u_match.group(2)))

    return indices, zmp_ref_x, zmp_ref_y, x, x_dot, x_ddot, y, y_dot, y_ddot, u_x, u_y

  def plot_data(indices, zmp_ref_x, zmp_ref_y, x, x_dot, x_ddot, y, y_dot, y_ddot, u_x, u_y, title):
      # Create subplots
      fig, axs = plt.subplots(5, 1, figsize=(10, 15), sharex=True)

      # Plot ZMP references
      axs[0].plot(indices, zmp_ref_x, label="ZMP REF X", color="blue")
      axs[0].plot(indices, zmp_ref_y, label="ZMP REF Y", color="orange")
      axs[0].set_ylabel("ZMP REF")
      axs[0].legend()
      axs[0].grid()

      # Plot X values
      axs[1].plot(indices, x, label="X", color="blue")
      # axs[1].plot(indices, x_dot, label="X Dot", color="orange")
      # axs[1].plot(indices, x_ddot, label="X DDot", color="green")
      axs[1].set_ylabel("X Values")
      axs[1].legend()
      axs[1].grid()

      # Plot Y values
      axs[2].plot(indices, y, label="Y", color="blue")
      # axs[2].plot(indices, y_dot, label="Y Dot", color="orange")
      # axs[2].plot(indices, y_ddot, label="Y DDot", color="green")
      axs[2].set_ylabel("Y Values")
      axs[2].legend()
      axs[2].grid()

      # Plot Ux
      axs[3].plot(indices, u_x, label="Ux", color="blue")
      axs[3].set_ylabel("Ux")
      axs[3].legend()
      axs[3].grid()

      # Plot Uy
      axs[4].plot(indices, u_y, label="Uy", color="orange")
      axs[4].set_ylabel("Uy")
      axs[4].set_xlabel("Index (i)")
      axs[4].legend()
      axs[4].grid()

      # Set the title
      fig.suptitle(title, fontsize=16)
      plt.tight_layout()
      plt.show()


  # Parse and plot data for both files
  file_paths = {
      "data_with_feedback": "./src/shi2d2_planner/debug_data/data_with_feedback.txt",
      "data_no_feedback": "./src/shi2d2_planner/debug_data/data_no_feedback.txt"
  }

  for title, file_path in file_paths.items():
      indices, zmp_ref_x, zmp_ref_y, x, x_dot, x_ddot, y, y_dot, y_ddot, u_x, u_y = parse_data(file_path)
      plot_data(indices, zmp_ref_x, zmp_ref_y, x, x_dot, x_ddot, y, y_dot, y_ddot, u_x, u_y, title)
  
# f6()

def f7():
    def parse_data(file_path):
        # Initialize lists to store parsed data
        indices = []
        zmp_ref_x = []
        zmp_ref_y = []
        x = []
        x_dot = []
        x_ddot = []
        y = []
        y_dot = []
        y_ddot = []
        u_x = []
        u_y = []
        com_x = []
        com_y = []
        left_foot_x = []
        left_foot_y = []
        left_foot_z = []
        right_foot_x = []
        right_foot_y = []
        right_foot_z = []

        # Regular expressions to extract data
        index_pattern = r"Solving ZMP MPC for (?:i|k)=(\d+)"
        zmp_ref_pattern = r"ZMP REF X=([\d\.\-e]+), Y=([\d\.\-e]+)"
        x_pattern = r"X=([\d\.\-e]+), ([\d\.\-e]+), ([\d\.\-e]+)"
        y_pattern = r"Y=([\d\.\-e]+), ([\d\.\-e]+), ([\d\.\-e]+)"
        u_pattern = r"Ux=([\d\.\-e]+), Uy=([\d\.\-e]+)"
        com_pattern = r"COM X=([\d\.\-e]+), COM Y=([\d\.\-e]+)"
        left_foot_pattern = r"Left foot pose: ([\d\.\-e]+), ([\d\.\-e]+), ([\d\.\-e]+)"
        right_foot_pattern = r"Right foot pose: ([\d\.\-e]+), ([\d\.\-e]+), ([\d\.\-e]+)"

        # Read the file and parse data
        with open(file_path, 'r') as file:
            for line in file:
                # Match each line with the corresponding pattern
                index_match = re.search(index_pattern, line)
                zmp_ref_match = re.search(zmp_ref_pattern, line)
                x_match = re.search(x_pattern, line)
                y_match = re.search(y_pattern, line)
                u_match = re.search(u_pattern, line)
                com_match = re.search(com_pattern, line)
                left_foot_match = re.search(left_foot_pattern, line)
                right_foot_match = re.search(right_foot_pattern, line)

                # Extract and append data
                if index_match:
                    indices.append(int(index_match.group(1)))
                if zmp_ref_match:
                    zmp_ref_x.append(float(zmp_ref_match.group(1)))
                    zmp_ref_y.append(float(zmp_ref_match.group(2)))
                if x_match:
                    x.append(float(x_match.group(1)))
                    x_dot.append(float(x_match.group(2)))
                    x_ddot.append(float(x_match.group(3)))
                if y_match:
                    y.append(float(y_match.group(1)))
                    y_dot.append(float(y_match.group(2)))
                    y_ddot.append(float(y_match.group(3)))
                if u_match:
                    u_x.append(float(u_match.group(1)))
                    u_y.append(float(u_match.group(2)))
                if com_match:
                    com_x.append(float(com_match.group(1)))
                    com_y.append(float(com_match.group(2)))
                if left_foot_match:
                    left_foot_x.append(float(left_foot_match.group(1)))
                    left_foot_y.append(float(left_foot_match.group(2)))
                    left_foot_z.append(float(left_foot_match.group(3)))
                if right_foot_match:
                    right_foot_x.append(float(right_foot_match.group(1)))
                    right_foot_y.append(float(right_foot_match.group(2)))
                    right_foot_z.append(float(right_foot_match.group(3)))

        return (indices, zmp_ref_x, zmp_ref_y, x, x_dot, x_ddot, y, y_dot, y_ddot,
                u_x, u_y, com_x, com_y, left_foot_x, left_foot_y, left_foot_z,
                right_foot_x, right_foot_y, right_foot_z)

    def plot_data(indices, zmp_ref_x, zmp_ref_y, x, x_dot, x_ddot, y, y_dot, y_ddot,
                  u_x, u_y, com_x, com_y, left_foot_x, left_foot_y, left_foot_z,
                  right_foot_x, right_foot_y, right_foot_z, title):
        # Create subplots
        fig, axs = plt.subplots(6, 1, figsize=(10, 20), sharex=True)
        # Plot ZMP references
        axs[0].plot(indices, zmp_ref_x, label="ZMP REF X", color="blue")
        axs[0].plot(indices, zmp_ref_y, label="ZMP REF Y", color="orange")
        axs[0].set_ylabel("ZMP REF")
        axs[0].legend()
        axs[0].grid()

        # Plot X values
        axs[1].plot(indices, x, label="X", color="blue")
        axs[1].plot(indices, com_x, label="COM X", color="purple")
        # axs[1].plot(indices, x_dot, label="X Dot", color="orange")
        # axs[1].plot(indices, x_ddot, label="X DDot", color="green")
        axs[1].set_ylabel("X Values")
        axs[1].legend()
        axs[1].grid()

        # Plot Y values
        axs[2].plot(indices, y, label="Y", color="blue")
        axs[2].plot(indices, com_y, label="COM Y", color="purple")
        # axs[2].plot(indices, y_dot, label="Y Dot", color="orange")
        # axs[2].plot(indices, y_ddot, label="Y DDot", color="green")
        axs[2].set_ylabel("Y Values")
        axs[2].legend()
        axs[2].grid()

        # Plot Ux and Uy
        axs[3].plot(indices, u_x, label="Ux", color="blue")
        axs[3].set_ylabel("X Control Inputs")
        axs[3].legend()
        axs[3].grid()
        
        axs[4].plot(indices, u_y, label="Uy", color="orange")
        axs[4].set_ylabel("Y Control Inputs")
        axs[4].legend()
        axs[4].grid()

        # Plot foot positions
        axs[5].plot(indices, left_foot_x, label="Left Foot X", color="blue")
        axs[5].plot(indices, right_foot_x, label="Right Foot X", color="orange")
        axs[5].set_ylabel("Foot X Positions")
        axs[5].set_xlabel("Index (i)")
        axs[5].legend()
        axs[5].grid()

        # Set the title
        fig.suptitle(title, fontsize=16)
        plt.tight_layout()
        # plt.show()

        if "no_feedback" in title:
           print("COM X:")
           print(com_x)
           print("COM Y:")
           print(com_y)

    # Parse and plot data for both files
    file_paths = {
        "data_with_feedback": "./src/shi2d2_planner/debug_data/full_data_with_feedback.txt",
        "data_with_feedback2": "./src/shi2d2_planner/debug_data/full_data_with_feedback2.txt",
        "data_no_feedback": "./src/shi2d2_planner/debug_data/full_data_no_feedback.txt"
    }

    max_index = 301
    for title, file_path in file_paths.items():
        (indices, zmp_ref_x, zmp_ref_y, x, x_dot, x_ddot, y, y_dot, y_ddot,
         u_x, u_y, com_x, com_y, left_foot_x, left_foot_y, left_foot_z,
         right_foot_x, right_foot_y, right_foot_z) = parse_data(file_path)
        plot_data(indices[:max_index], zmp_ref_x[:max_index], zmp_ref_y[:max_index], x[:max_index], x_dot[:max_index], x_ddot[:max_index], y[:max_index], y_dot[:max_index], y_ddot[:max_index],
                  u_x[:max_index], u_y[:max_index], com_x[:max_index], com_y[:max_index], left_foot_x[:max_index], left_foot_y[:max_index], left_foot_z[:max_index],
                  right_foot_x[:max_index], right_foot_y[:max_index], right_foot_z[:max_index], title)
    plt.show()

f7()